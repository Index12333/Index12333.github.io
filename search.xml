<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lookup类型数据自定义过滤</title>
      <link href="/20221023004.html"/>
      <url>/20221023004.html</url>
      
        <content type="html"><![CDATA[<h2 id="自定义Lookup查找视图"><a href="#自定义Lookup查找视图" class="headerlink" title="自定义Lookup查找视图"></a>自定义Lookup查找视图</h2><p>需要根据实际情况，是<code>onChange</code>触发，还是页面加载<code>form_onLoad</code>的时候就预设</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//需求：当要修改旧件名称时（Lookup）只能用新件名称从【替代料】中匹配替代料或被替代料获取目标产品。</span><span class="token keyword">function</span> <span class="token function">form_onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> new_productnew_id <span class="token operator">=</span> rtcrm<span class="token punctuation">.</span><span class="token function">getLookupId</span><span class="token punctuation">(</span><span class="token string">"new_productnew_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_productnew_id <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setProductLookUp</span><span class="token punctuation">(</span>new_productnew_id<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//页面加载时预设</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setProductLookUp</span><span class="token punctuation">(</span>new_productnew_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//new_srv_partsreplace 替代料</span>    <span class="token comment" spellcheck="true">//product 产品</span>    <span class="token keyword">var</span> fetchXml <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;fetch  mapping='logical' version='1.0' distinct='true'>  &lt;entity name='product'>    &lt;attribute name='name' />    &lt;attribute name='productid' />    &lt;link-entity name='new_srv_partsreplace' to='productid' from='new_productid' alias='p1' link-type='outer' />    &lt;link-entity name='new_srv_partsreplace' to='productid' from='new_product_partsreplaceid' alias='p2' link-type='outer' />    &lt;filter type='or'>      &lt;condition attribute='new_productid' entityname='p1' operator='eq' value='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>new_productnew_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' />      &lt;condition attribute='new_product_partsreplaceid' entityname='p1' operator='eq' value='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>new_productnew_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' />      &lt;condition attribute='new_productid' entityname='p2' operator='eq' value='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>new_productnew_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' />      &lt;condition attribute='new_product_partsreplaceid' entityname='p2' operator='eq' value='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>new_productnew_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' />    &lt;/filter>    &lt;order attribute='productnumber' />  &lt;/entity>&lt;/fetch>`</span></span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通用写法</span>    <span class="token comment" spellcheck="true">//【注意】：row标签中的id的值目标实体ID值</span>    <span class="token keyword">var</span> layoutXml <span class="token operator">=</span> <span class="token string">"&lt;grid name='resultset' object='1' jump='name' select='1' icon='1' preview='1'>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;row name='result' id='productid'>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;cell name='name' width='150' />"</span> <span class="token operator">+</span>        <span class="token string">"&lt;/row>"</span> <span class="token operator">+</span>        <span class="token string">"&lt;/grid>"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第一个参数：为目标字段名，第二个参数：检索的目标实体</span>        rtcrm<span class="token punctuation">.</span><span class="token function">customizeLookupView</span><span class="token punctuation">(</span><span class="token string">"new_product_id"</span><span class="token punctuation">,</span> <span class="token string">"product"</span><span class="token punctuation">,</span> fetchXml<span class="token punctuation">,</span> layoutXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、后台接口配合前端Vue过滤lookup数据"><a href="#二、后台接口配合前端Vue过滤lookup数据" class="headerlink" title="二、后台接口配合前端Vue过滤lookup数据"></a>二、后台接口配合前端Vue过滤lookup数据</h2><h4 id="后台："><a href="#后台：" class="headerlink" title="后台："></a>后台：</h4><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/*备件订单lookup过滤视图"page":页数"count":总数"orderby":排序"condition":动态条件"filterValue":过滤*/</span><span class="token keyword">public</span> LookupViewResult <span class="token function">GetProductLookupViewData</span><span class="token punctuation">(</span><span class="token keyword">string</span> entityName<span class="token punctuation">,</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">string</span> <span class="token keyword">select</span><span class="token punctuation">,</span> <span class="token keyword">string</span> <span class="token keyword">orderby</span><span class="token punctuation">,</span> <span class="token keyword">string</span> condition<span class="token punctuation">,</span> <span class="token keyword">string</span> filter<span class="token punctuation">,</span> <span class="token keyword">string</span> filterValue<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LookupViewResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> qe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryExpression</span><span class="token punctuation">(</span><span class="token string">"new_discount_price"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    qe<span class="token punctuation">.</span>Criteria<span class="token punctuation">.</span><span class="token function">AddCondition</span><span class="token punctuation">(</span><span class="token string">"statecode"</span><span class="token punctuation">,</span> ConditionOperator<span class="token punctuation">.</span>Equal<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    qe<span class="token punctuation">.</span>Criteria<span class="token punctuation">.</span><span class="token function">AddCondition</span><span class="token punctuation">(</span><span class="token string">"new_approvalstatus"</span><span class="token punctuation">,</span> ConditionOperator<span class="token punctuation">.</span>Equal<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//已审核</span>    qe<span class="token punctuation">.</span>ColumnSet<span class="token punctuation">.</span><span class="token function">AddColumns</span><span class="token punctuation">(</span><span class="token string">"new_price"</span><span class="token punctuation">,</span> <span class="token string">"new_product_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LinkEntity linkEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkEntity</span><span class="token punctuation">(</span><span class="token string">"new_discount_price"</span><span class="token punctuation">,</span> <span class="token string">"product"</span><span class="token punctuation">,</span> <span class="token string">"new_product_id"</span><span class="token punctuation">,</span> <span class="token string">"productid"</span><span class="token punctuation">,</span> JoinOperator<span class="token punctuation">.</span>Inner<span class="token punctuation">)</span><span class="token punctuation">;</span>    linkEntity<span class="token punctuation">.</span>EntityAlias <span class="token operator">=</span> <span class="token string">"p"</span><span class="token punctuation">;</span>    linkEntity<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span><span class="token function">AddColumns</span><span class="token punctuation">(</span><span class="token string">"productnumber"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    linkEntity<span class="token punctuation">.</span>LinkCriteria<span class="token punctuation">.</span><span class="token function">AddCondition</span><span class="token punctuation">(</span><span class="token string">"statecode"</span><span class="token punctuation">,</span> ConditionOperator<span class="token punctuation">.</span>Equal<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//筛选明细</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>filterValue<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> quickFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterExpression</span>        <span class="token punctuation">{</span>            FilterOperator <span class="token operator">=</span> LogicalOperator<span class="token punctuation">.</span>Or<span class="token punctuation">,</span>            Conditions <span class="token operator">=</span>            <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConditionExpression</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> ConditionOperator<span class="token punctuation">.</span>Like<span class="token punctuation">,</span> <span class="token string">"%"</span> <span class="token operator">+</span> filterValue <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConditionExpression</span><span class="token punctuation">(</span><span class="token string">"productnumber"</span><span class="token punctuation">,</span> ConditionOperator<span class="token punctuation">.</span>Like<span class="token punctuation">,</span> <span class="token string">"%"</span> <span class="token operator">+</span> filterValue <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        linkEntity<span class="token punctuation">.</span>LinkCriteria<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>quickFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    qe<span class="token punctuation">.</span>LinkEntities<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>linkEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    qe<span class="token punctuation">.</span>PageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PagingInfo</span>    <span class="token punctuation">{</span>        Count <span class="token operator">=</span> count<span class="token punctuation">,</span>        PageNumber <span class="token operator">=</span> page<span class="token punctuation">,</span>        ReturnTotalRecordCount <span class="token operator">=</span> <span class="token keyword">true</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> cons <span class="token operator">=</span> condition<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cons<span class="token punctuation">.</span><span class="token function">Each</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span>                  <span class="token punctuation">{</span>                      <span class="token keyword">var</span> con <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"eq"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                      <span class="token punctuation">{</span>                          qe<span class="token punctuation">.</span>Criteria<span class="token punctuation">.</span><span class="token function">AddCondition</span><span class="token punctuation">(</span>con<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ConditionOperator<span class="token punctuation">.</span>Equal<span class="token punctuation">,</span> con<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> ec <span class="token operator">=</span> organizationServiceAdmin<span class="token punctuation">.</span><span class="token function">RetrieveMultiple</span><span class="token punctuation">(</span>qe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ec <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ec<span class="token punctuation">.</span>Entities<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result<span class="token punctuation">.</span>TotalRecordCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> listDic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> entity <span class="token keyword">in</span> ec<span class="token punctuation">.</span>Entities<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//产品名称</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"p.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"new_product_idname"</span><span class="token punctuation">,</span> entity<span class="token punctuation">.</span><span class="token generic-method function">GetAliasAttributeValue<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"p.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"productid"</span><span class="token punctuation">,</span> entity<span class="token punctuation">.</span><span class="token generic-method function">GetAttributeValue<span class="token punctuation">&lt;</span>EntityReference<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"new_product_id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"new_price"</span><span class="token punctuation">,</span> entity<span class="token punctuation">.</span><span class="token generic-method function">GetAttributeValue<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"new_price"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listDic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result<span class="token punctuation">.</span>TotalRecordCount <span class="token operator">=</span> ec<span class="token punctuation">.</span>TotalRecordCount<span class="token punctuation">;</span>    result<span class="token punctuation">.</span>Data <span class="token operator">=</span> listDic<span class="token punctuation">;</span>    result<span class="token punctuation">.</span>PagingCookie <span class="token operator">=</span> ec<span class="token punctuation">.</span>PagingCookie<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口</span><span class="token punctuation">[</span>HttpGet<span class="token punctuation">,</span> <span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"GetProductLookupViewData"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">Description</span><span class="token punctuation">(</span><span class="token string">"折旧物料自定义过滤"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> LookupViewResult <span class="token function">GetProductLookupViewData</span><span class="token punctuation">(</span><span class="token keyword">string</span> entityName<span class="token punctuation">,</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">string</span> <span class="token keyword">select</span><span class="token punctuation">,</span> <span class="token keyword">string</span> <span class="token keyword">orderby</span><span class="token punctuation">,</span> <span class="token keyword">string</span> condition<span class="token punctuation">,</span> <span class="token keyword">string</span> filter<span class="token punctuation">,</span> <span class="token keyword">string</span> filterValue<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SparepartsCommand</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>UserIdentity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProductLookupViewData</span><span class="token punctuation">(</span>entityName<span class="token punctuation">,</span> page<span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token keyword">select</span><span class="token punctuation">,</span> <span class="token keyword">orderby</span><span class="token punctuation">,</span> condition<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> filterValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//类文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LookupViewResult</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> TotalRecordCount <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> PagingCookie <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> IList<span class="token operator">&lt;</span>Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span> Data <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回Json数据："><a href="#返回Json数据：" class="headerlink" title="返回Json数据："></a>返回Json数据：</h4><pre class="line-numbers language-json"><code class="language-json">Data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>new_product_idname<span class="token operator">:</span> <span class="token string">"九号电动C60-TDT001Z-上海版-罗兰紫黄；九号电自C60-裸车-含电池"</span><span class="token punctuation">,</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">{</span>new_product_idname<span class="token operator">:</span> <span class="token string">"九号电动C60-TDT001Z-上海版-罗兰紫黄；九号电自C60-裸车-含电池"</span><span class="token punctuation">,</span>…<span class="token punctuation">}</span>new_price<span class="token operator">:</span> <span class="token string">"3500.0000000000"</span>new_product_idname<span class="token operator">:</span> <span class="token string">"九号电动C60-TDT001Z-上海版-罗兰紫黄；九号电自C60-裸车-含电池"</span>productid<span class="token operator">:</span> <span class="token string">"201c3625-5585-eb11-a12b-fa0bf8335e00"</span>PagingCookie<span class="token operator">:</span> <span class="token string">"&lt;cookie page=\"1\">&lt;new_discount_priceid last=\"{09273524-DE4A-ED11-A139-FA0BF8335E00}\" first=\"{09273524-DE4A-ED11-A139-FA0BF8335E00}\" />&lt;/cookie>"</span>TotalRecordCount<span class="token operator">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="前端vue页面（公司封装protal端）："><a href="#前端vue页面（公司封装protal端）：" class="headerlink" title="前端vue页面（公司封装protal端）："></a>前端vue页面（公司封装protal端）：</h4><pre class="line-numbers language-vue"><code class="language-vue"><rt-header-button-group slot="toolbar">    <el-button icon="el-icon-tickets" @click="cancelevaluate" type="warning"               >物料折旧申请</el-button        >......</rt-header-button-group><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//物料折旧申请</span>    cancelevaluate<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>ApplyDialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/pictures/202210/Snipaste_20221024_095119.png" alt></p><h5 id="弹框页面："><a href="#弹框页面：" class="headerlink" title="弹框页面："></a>弹框页面：</h5><pre class="line-numbers language-vue"><code class="language-vue"><template>  <el-dialog    width="30%"    class="rt-dialog"    title="物料折旧申请"    :visible.sync="dialogChangeVisible"    :before-close="clearTheData"  >    <el-form      ref="editForm"      :rules="rules"      :model="editForm"      label-width="120px"      label-position="left"      v-loading="loading"    >      <div>        <el-row :gutter="50">          <el-col :span="24" style="width: 100%">            <el-form-item              label="配件名称"              prop="new_product_id"              :required="false"            >              <rt-lookup                v-model="editForm.new_product_id"                entity="product"                idField="productid"                :dialogRequestUrl="queryUrl"                :request-url="queryUrl"                nameField="new_product_idname"                dialogFilterFields="new_product_idname"                dialog-orderby-fields="new_product_idname asc"                :dialog-display-fields="[                  { name: 'new_product_idname', label: '产品名称' },                  { name: 'new_price', label: '折旧价格' },                ]"              />            </el-form-item>          </el-col>        </el-row>        <el-row :gutter="50">          <el-col :span="24">            <el-form-item label="数量" prop="new_qty">              <rt-input type="number" v-model="editForm.new_qty"></rt-input>            </el-form-item>          </el-col>        </el-row>      </div>    </el-form>    <div slot="footer" class="dialog-footer">      <el-button @click="cancel" :loading="btnLoading">{{        $t("CANCEL")      }}</el-button>      <el-button        @click="saveChange('editForm')"        type="primary"        :loading="btnLoading"        >{{ $t("BUTTON_DETERMINE") }}</el-button      >    </div>  </el-dialog></template><script>export default {  data: function () {    return {      btnLoading: false,      loading: false,      dialogChangeVisible: false,      //过滤Lookup数据接口      queryUrl: "api/service1portal/Spareparts/GetProductLookupViewData",      editForm: {        new_product_id: null,        new_qty: null,      },      rules: {        new_appealreason: [          {            required: true,            trigger: "change",          },        ],      },    };  },  mounted() {},  methods: {    saveChange(editForm) {      this.$refs[editForm].validate((valid) => {        if (!this.editForm.new_product_id) {          rt.showErrorToast("配件名称必填！");          return;        }        if (!this.editForm.new_qty) {          rt.showErrorToast("数量必填！");          return;        }        if (          this.editForm.new_qty &&          this.editForm.new_qty.indexOf(".", 0) != -1        ) {          rt.showErrorToast("数量必须为整数！");          return;        }        if (!valid) {          rt.showErrorToast(this.$t("PleaseInputRequiredFields"));          return;        } else {          this.loading = true;          var api = "api/service1portal/Spareparts/CreateDepreciation";          var params = {            new_product_id: this.editForm.new_product_id.id,            new_qty: parseInt(this.editForm.new_qty),          };          debugger;          rt.post(api, params)            .then((res) => {              this.loading = false;              rt.showSuccessToast(res);              this.dialogChangeVisible = false;              this.$emit("confirm");              this.editForm.new_product_id = null;              this.editForm.new_qty = null;            })            .catch((err) => {              this.loading = false;              this.btnLoading = false;              rt.showErrorToast(err);            });        }      });    },    clearTheData() {      this.dialogChangeVisible = false;    },    cancel() {      this.dialogChangeVisible = false;    },    show(val) {      this.dialogChangeVisible = true;    },  },};</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/pictures/202210/Snipaste_20221024_095141.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> CRM </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析存储过程</title>
      <link href="/20221023003.html"/>
      <url>/20221023003.html</url>
      
        <content type="html"><![CDATA[<p><strong>阅读目录</strong></p><ul><li><p>一:   存储过程概述</p></li><li><p>二：存储过程分类</p></li><li><p>三：创建存储过程</p></li><li><p>1.创建无参存储过程</p></li><li><p>2.修改存储过程</p></li><li><p>3.删除存储过程</p></li><li><p>4.重命名存储过程</p></li><li><p>5.创建带参数的存储过程</p></li></ul><p>简单来说，存储过程就是一条或者多条sql语句的集合,可视为批处理文件，但是其作用不仅限于批处理。本篇主要介绍变量的使用，存储过程和存储函数的创建，调用，查看，修改以及删除操作。</p><h2 id="一-存储过程概述"><a href="#一-存储过程概述" class="headerlink" title="一:存储过程概述"></a>一:存储过程概述</h2><p>SQL Server中的存储过程是使用T_SQL编写的代码段。它的目的在于能够方便的从系统表中查询信息，或者完成与更新数据库表相关的管理任务和其他的系统管理任务.T_SQL语句是SQL Server数据库与应用程序之间的编程接口。在很多情况下，一些代码会被开发者重复编写多次，如果每次都编写相同功能的代码，不但繁琐，而且容易出错，而且由于SQL Server逐条的执行语句会降低系统的运行效率。</p><p>简而言之，存储过程就是SQL Server为了实现特定任务，而将一些需要多次调用的固定操作语句编写成程序段，这些程序段存储在服务器上，有数据库服务器通过程序来调用。</p><p><strong>存储过程的优点:</strong></p><ol><li><p>存储过程加快系统运行速度，存储过程只在创建时编译，以后每次执行时不需要重新编译。</p></li><li><p>存储过程可以封装复杂的数据库操作，简化操作流程，例如对多个表的更新，删除等。</p></li><li><p>可实现模块化的程序设计，存储过程可以多次调用，提供统一的数据库访问接口，改进应用程序的可维护性。</p></li><li><p>存储过程可以增加代码的安全性，对于用户不能直接操作存储过程中引用的对象，SQL Server可以设定用户对指定存储过程的执行权限。</p></li><li><p>存储过程可以降低网络流量，存储过程代码直接存储于数据库中，在客户端与服务器的通信过程中，不会产生大量的T_SQL代码流量。</p></li></ol><p><strong>存储过程的缺点：</strong></p><ol><li><p>数据库移植不方便，存储过程依赖与数据库管理系统， SQL Server 存储过程中封装的操作代码不能直接移植到其他的数据库管理系统中。</p></li><li><p>不支持面向对象的设计，无法采用面向对象的方式将逻辑业务进行封装，甚至形成通用的可支持服务的业务逻辑框架.</p></li><li><p>代码可读性差，不易维护。不支持集群。</p></li></ol><h2 id="二：存储过程分类"><a href="#二：存储过程分类" class="headerlink" title="二：存储过程分类"></a>二：存储过程分类</h2><h3 id="1-系统存储过程"><a href="#1-系统存储过程" class="headerlink" title="1.系统存储过程"></a>1.系统存储过程</h3><p>系统存储过程是 SQL Server系统自身提供的存储过程，可以作为命令执行各种操作。</p><p>系统存储过程主要用来从系统表中获取信息，使用系统存储过程完成数据库服务器的管理工作，为系统管理员提供帮助，为用户查看数据库对象提供方便，系统存储过程位于数据库服务器中，并且以sp_开头，系统存储过程定义在系统定义和用户定义的数据库中，在调用时不必在存储过程前加数据库限定名。例如：sp_rename系统存储过程可以修改当前数据库中用户创建对象的名称，sp_helptext存储过程可以显示规则，默认值或视图的文本信息，SQL SERVER服务器中许多的管理工作都是通过执行系统存储过程来完成的，许多系统信息也可以通过执行系统存储过程来获得。</p><p>系统存储过程创建并存放在与系统数据库master中，一些系统存储过程只能由系统管理员使用，而有些系统存储过程通过授权可以被其它用户所使用。</p><h3 id="2-用户存储过程-自定义存储过程"><a href="#2-用户存储过程-自定义存储过程" class="headerlink" title="2.用户存储过程(自定义存储过程)"></a>2.用户存储过程(自定义存储过程)</h3><p>自定义存储过程即用户使用T_SQL语句编写的、为了实现某一特定业务需求，在用户数据库中编写的T_SQL语句集合，自定义存储过程可以接受输入参数、向客户端返回结果和信息，返回输出参数等。创建自定义存储过程时，存储过程名前加上”##”表示创建了一个全局的临时存储过程;存储过程前面加上”#”时，表示创建的局部临时存储过程。局部临时存储过程只能在创建它的回话中使用，会话结束时，将被删除。这两种存储过程都存储在tempdb数据库中。</p><p>用户定义的存储过程分为两类：<strong>T_SQL</strong>  和  <strong>CLR</strong></p><h4 id="T-SQL存储过程"><a href="#T-SQL存储过程" class="headerlink" title="T_SQL存储过程"></a>T_SQL存储过程</h4><p>是指保存的T_SQL语句集合，可以接受和返回用户提供的参数，存储过程也可能从数据库向客户端应用程序返回数据。</p><h4 id="CLR存储过程"><a href="#CLR存储过程" class="headerlink" title="CLR存储过程"></a>CLR存储过程</h4><p>是指引用Microsoft.NET Framework公共语言的方法存储过程，可以接受和返回用户提供的参数，它们在.NET Framework程序集是作为类的公共静态方法实现的。</p><h3 id="3-扩展存储过程"><a href="#3-扩展存储过程" class="headerlink" title="3.扩展存储过程"></a>3.扩展存储过程</h3><p>扩展存储过程是以在SQL SERVER环境外执行的动态连接(DLL文件)来实现的，可以加载到SQL SERVER实例运行的地址空间中执行，扩展存储过程可以用SQL SERVER扩展存储过程API编程，扩展存储过程以前缀”xp_”来标识，对于用户来说，扩展存储过程和普通话存储过程一样，可以用相同的方法来执行。</p><h2 id="三：创建存储过程"><a href="#三：创建存储过程" class="headerlink" title="三：创建存储过程"></a>三：创建存储过程</h2><p>工欲善其事，必先利其器，准备数据如下:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">use</span> sample_db<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--创建测试books表</span><span class="token keyword">create</span> <span class="token keyword">table</span> books <span class="token punctuation">(</span>    book_id <span class="token keyword">int</span> <span class="token keyword">identity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    book_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    book_price <span class="token keyword">float</span><span class="token punctuation">,</span>    book_auth <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--插入测试数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> books <span class="token punctuation">(</span>book_name<span class="token punctuation">,</span>book_price<span class="token punctuation">,</span>book_auth<span class="token punctuation">)</span>                    <span class="token keyword">values</span>                        <span class="token punctuation">(</span><span class="token string">'论语'</span><span class="token punctuation">,</span><span class="token number">25.6</span><span class="token punctuation">,</span><span class="token string">'孔子'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">(</span><span class="token string">'天龙八部'</span><span class="token punctuation">,</span><span class="token number">25.6</span><span class="token punctuation">,</span><span class="token string">'金庸'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">(</span><span class="token string">'雪山飞狐'</span><span class="token punctuation">,</span><span class="token number">32.7</span><span class="token punctuation">,</span><span class="token string">'金庸'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">(</span><span class="token string">'平凡的世界'</span><span class="token punctuation">,</span><span class="token number">35.8</span><span class="token punctuation">,</span><span class="token string">'路遥'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">(</span><span class="token string">'史记'</span><span class="token punctuation">,</span><span class="token number">54.8</span><span class="token punctuation">,</span><span class="token string">'司马迁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-创建无参存储过程"><a href="#1-创建无参存储过程" class="headerlink" title="1.创建无参存储过程"></a>1.创建无参存储过程</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.创建无参存储过程</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sys<span class="token punctuation">.</span>objects <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'getAllBooks'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">drop</span> <span class="token keyword">proc</span> proc_get_studentgo<span class="token keyword">create</span> <span class="token keyword">procedure</span> getAllBooks<span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> books<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--调用,执行存储过程</span><span class="token keyword">exec</span> getAllBooks<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改存储过程"><a href="#2-修改存储过程" class="headerlink" title="2.修改存储过程"></a>2.修改存储过程</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">procedure</span> dbo<span class="token punctuation">.</span>getAllBooks <span class="token keyword">as</span><span class="token keyword">select</span> book_auth <span class="token keyword">from</span> books<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-删除存储过程"><a href="#3-删除存储过程" class="headerlink" title="3.删除存储过程"></a>3.删除存储过程</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span> getAllBooks<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-重命名存储过程"><a href="#4-重命名存储过程" class="headerlink" title="4.重命名存储过程"></a>4.重命名存储过程</h3><pre class="line-numbers language-sql"><code class="language-sql">sp_rename getAllBooks<span class="token punctuation">,</span>proc_get_allBooks<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-创建带参数的存储过程"><a href="#5-创建带参数的存储过程" class="headerlink" title="5.创建带参数的存储过程"></a>5.创建带参数的存储过程</h3><p>存储过程的参数分为两种：输入参数和输出参数</p><p><strong>输入参数</strong>：用于向存储过程传入值，类似java语言或则c中的值传递。</p><p><strong>输出参数：</strong>用于调用存储过程后，参会结果，类似java语言的按引用传递。</p><p><strong>值传递和引用传递区别:</strong></p><ul><li><p>基本数据类型赋值属于值传递；引用类型之间赋值属于引用传递。</p></li><li><p>值传递传递的是实实在在的变量值；引用传递传递的是对象的引用地址。</p></li><li><p>值传递后，两个变量改变的是各自的值；引用传递后，两个引用改变的是同一个对象的状态</p></li></ul><h4 id="1-、带一个参数存储过程"><a href="#1-、带一个参数存储过程" class="headerlink" title="(1)、带一个参数存储过程"></a>(1)、带一个参数存储过程</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sys<span class="token punctuation">.</span>objects <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'searchBooks'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">drop</span> <span class="token keyword">proc</span> searchBooksgo<span class="token keyword">create</span> <span class="token keyword">proc</span> searchBooks<span class="token punctuation">(</span><span class="token variable">@bookID</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">as</span>    <span class="token comment" spellcheck="true">--要求book_id列与输入参数相等</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> books <span class="token keyword">where</span> book_id<span class="token operator">=</span><span class="token variable">@bookID</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--执行searchBooks</span><span class="token keyword">exec</span> searchBooks <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-、带2个参数存储过程"><a href="#2-、带2个参数存储过程" class="headerlink" title="(2)、带2个参数存储过程"></a>(2)、带2个参数存储过程</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sys<span class="token punctuation">.</span>objects <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'searchBooks1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">drop</span> <span class="token keyword">proc</span> searchBooks1go<span class="token keyword">create</span> <span class="token keyword">proc</span> searchBooks1<span class="token punctuation">(</span>    <span class="token variable">@bookID</span> <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token variable">@bookAuth</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">as</span>    <span class="token comment" spellcheck="true">--要求book_id和book_Auth列与输入参数相等</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> books <span class="token keyword">where</span> book_id<span class="token operator">=</span><span class="token variable">@bookID</span> <span class="token operator">and</span> book_auth<span class="token operator">=</span><span class="token variable">@bookAuth</span><span class="token punctuation">;</span><span class="token keyword">exec</span> searchBooks1 <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'金庸'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-、创建有返回值的存储过程"><a href="#3-、创建有返回值的存储过程" class="headerlink" title="(3)、创建有返回值的存储过程"></a>(3)、创建有返回值的存储过程</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sys<span class="token punctuation">.</span>objects <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'getBookId'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">drop</span> <span class="token keyword">proc</span> getBookIdgo<span class="token keyword">create</span> <span class="token keyword">proc</span> getBookId<span class="token punctuation">(</span>    <span class="token variable">@bookAuth</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">--输入参数,无默认值</span>    <span class="token variable">@bookId</span> <span class="token keyword">int</span> output <span class="token comment" spellcheck="true">--输入/输出参数 无默认值</span><span class="token punctuation">)</span><span class="token keyword">as</span>    <span class="token keyword">select</span> <span class="token variable">@bookId</span><span class="token operator">=</span>book_id <span class="token keyword">from</span> books <span class="token keyword">where</span> book_auth<span class="token operator">=</span><span class="token variable">@bookAuth</span><span class="token comment" spellcheck="true">--执行getBookId这个带返回值的存储过程</span><span class="token keyword">declare</span> <span class="token variable">@id</span> <span class="token keyword">int</span> <span class="token comment" spellcheck="true">--声明一个变量用来接收执行存储过程后的返回值</span><span class="token keyword">exec</span> getBookId <span class="token string">'孔子'</span><span class="token punctuation">,</span><span class="token variable">@id</span> output<span class="token keyword">select</span> <span class="token variable">@id</span> <span class="token keyword">as</span> bookId<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--as是给返回的列值起一个名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-、创建带通配符的存储过程"><a href="#4-、创建带通配符的存储过程" class="headerlink" title="(4)、创建带通配符的存储过程"></a>(4)、创建带通配符的存储过程</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sys<span class="token punctuation">.</span>objects <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'charBooks'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">drop</span> <span class="token keyword">proc</span> charBooksgo<span class="token keyword">create</span> <span class="token keyword">proc</span> charBooks<span class="token punctuation">(</span>    <span class="token variable">@bookAuth</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'金%'</span><span class="token punctuation">,</span>    <span class="token variable">@bookName</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token keyword">as</span>     <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> books <span class="token keyword">where</span> book_auth <span class="token operator">like</span> <span class="token variable">@bookAuth</span> <span class="token operator">and</span> book_name <span class="token operator">like</span> <span class="token variable">@bookName</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--执行存储过程charBooks</span><span class="token keyword">exec</span>  charBooks    <span class="token string">'孔%'</span><span class="token punctuation">,</span><span class="token string">'论%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-、加密存储过程"><a href="#5-、加密存储过程" class="headerlink" title="(5)、加密存储过程"></a>(5)、加密存储过程</h4><p>with encryption子句对用户隐藏存储过程的文本.下例创建加密过程,使用 sp_helptext 系统存储过程获取关于加密过程的信息,然后尝试直接从 syscomments 表中获取关于该过程的信息.</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token punctuation">(</span>object_id<span class="token punctuation">(</span><span class="token string">'books_encryption'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">)</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span>    <span class="token keyword">drop</span> <span class="token keyword">proc</span> books_encryptiongo<span class="token keyword">create</span> <span class="token keyword">proc</span> books_encryption <span class="token keyword">with</span> encryption<span class="token keyword">as</span>     <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> books<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--执行此过程books_encryption</span><span class="token keyword">exec</span> books_encryption<span class="token punctuation">;</span><span class="token keyword">exec</span> sp_helptext <span class="token string">'books_encryption'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--控制台会显示"对象 'books_encryption' 的文本已加密。"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-、不缓存存储过程"><a href="#6-、不缓存存储过程" class="headerlink" title="(6)、不缓存存储过程"></a>(6)、不缓存存储过程</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--with  recompile不缓存</span><span class="token keyword">if</span> <span class="token punctuation">(</span>object_id<span class="token punctuation">(</span><span class="token string">'book_temp'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">)</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span>    <span class="token keyword">drop</span> <span class="token keyword">proc</span> book_tempgo<span class="token keyword">create</span> <span class="token keyword">proc</span> book_temp<span class="token keyword">with</span> recompile<span class="token keyword">as</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> books<span class="token punctuation">;</span>go<span class="token keyword">exec</span> book_temp<span class="token punctuation">;</span><span class="token keyword">exec</span> sp_helptext <span class="token string">'book_temp'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-、创建带游标参数的存储过程"><a href="#7-、创建带游标参数的存储过程" class="headerlink" title="(7)、创建带游标参数的存储过程"></a>(7)、创建带游标参数的存储过程</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token punctuation">(</span>object_id<span class="token punctuation">(</span><span class="token string">'book_cursor'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">)</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span>    <span class="token keyword">drop</span> <span class="token keyword">proc</span> book_cursorgo<span class="token keyword">create</span> <span class="token keyword">proc</span> book_cursor    <span class="token variable">@bookCursor</span> <span class="token keyword">cursor</span> <span class="token keyword">varying</span> output<span class="token keyword">as</span>    <span class="token keyword">set</span> <span class="token variable">@bookCursor</span><span class="token operator">=</span><span class="token keyword">cursor</span> forward_only static <span class="token keyword">for</span>    <span class="token keyword">select</span> book_id<span class="token punctuation">,</span>book_name<span class="token punctuation">,</span>book_auth <span class="token keyword">from</span> books    <span class="token keyword">open</span> <span class="token variable">@bookCursor</span><span class="token punctuation">;</span>go<span class="token comment" spellcheck="true">--调用book_cursor存储过程</span><span class="token keyword">declare</span> <span class="token variable">@cur</span> <span class="token keyword">cursor</span><span class="token punctuation">,</span>        <span class="token variable">@bookID</span> <span class="token keyword">int</span><span class="token punctuation">,</span>        <span class="token variable">@bookName</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token variable">@bookAuth</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exec</span> book_cursor <span class="token variable">@bookCursor</span><span class="token operator">=</span><span class="token variable">@cur</span> output<span class="token punctuation">;</span><span class="token keyword">fetch</span> <span class="token keyword">next</span> <span class="token keyword">from</span> <span class="token variable">@cur</span> <span class="token keyword">into</span> <span class="token variable">@bookID</span><span class="token punctuation">,</span><span class="token variable">@bookName</span><span class="token punctuation">,</span><span class="token variable">@bookAuth</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>@<span class="token variable">@FETCH_STATUS</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>     <span class="token keyword">fetch</span> <span class="token keyword">next</span> <span class="token keyword">from</span> <span class="token variable">@cur</span> <span class="token keyword">into</span> <span class="token variable">@bookID</span><span class="token punctuation">,</span><span class="token variable">@bookName</span><span class="token punctuation">,</span><span class="token variable">@bookAuth</span><span class="token punctuation">;</span>    <span class="token keyword">print</span> <span class="token string">'bookID:'</span><span class="token operator">+</span><span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">,</span><span class="token variable">@bookID</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' , bookName: '</span><span class="token operator">+</span> <span class="token variable">@bookName</span>            <span class="token operator">+</span><span class="token string">' ,bookAuth: '</span><span class="token operator">+</span><span class="token variable">@bookAuth</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">close</span> <span class="token variable">@cur</span>    <span class="token comment" spellcheck="true">--关闭游标</span><span class="token keyword">DEALLOCATE</span> <span class="token variable">@cur</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--释放游标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-、创建分页存储过程"><a href="#8-、创建分页存储过程" class="headerlink" title="(8)、创建分页存储过程"></a>(8)、创建分页存储过程</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token punctuation">(</span>object_id<span class="token punctuation">(</span><span class="token string">'book_page'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">)</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span>    <span class="token keyword">drop</span> <span class="token keyword">proc</span> book_pagego<span class="token keyword">create</span> <span class="token keyword">proc</span> book_page<span class="token punctuation">(</span>    <span class="token variable">@TableName</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">--表名</span>    <span class="token variable">@ReFieldsStr</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">--字段名(全部字段为*)</span>    <span class="token variable">@OrderString</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">--排序字段(必须!支持多字段不用加order by)</span>    <span class="token variable">@WhereString</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span>N<span class="token string">''</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">--条件语句(不用加where)</span>    <span class="token variable">@PageSize</span> <span class="token keyword">int</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">--每页多少条记录</span>    <span class="token variable">@PageIndex</span> <span class="token keyword">int</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">--指定当前为第几页</span>    <span class="token variable">@TotalRecord</span> <span class="token keyword">int</span> output            <span class="token comment" spellcheck="true">--返回总记录数</span><span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">begin</span>     <span class="token comment" spellcheck="true">--处理开始点和结束点</span>    <span class="token keyword">Declare</span> <span class="token variable">@StartRecord</span> <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token keyword">Declare</span> <span class="token variable">@EndRecord</span> <span class="token keyword">int</span><span class="token punctuation">;</span>     <span class="token keyword">Declare</span> <span class="token variable">@TotalCountSql</span> nvarchar<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">Declare</span> <span class="token variable">@SqlString</span> nvarchar<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">set</span> <span class="token variable">@StartRecord</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">@PageIndex</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token variable">@PageSize</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">set</span> <span class="token variable">@EndRecord</span> <span class="token operator">=</span> <span class="token variable">@StartRecord</span> <span class="token operator">+</span> <span class="token variable">@PageSize</span> <span class="token operator">-</span> <span class="token number">1</span>     <span class="token keyword">SET</span> <span class="token variable">@TotalCountSql</span><span class="token operator">=</span> N<span class="token string">'select @TotalRecord = count(*) from '</span> <span class="token operator">+</span> <span class="token variable">@TableName</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--总记录数语句</span>    <span class="token keyword">SET</span> <span class="token variable">@SqlString</span> <span class="token operator">=</span> N<span class="token string">'(select row_number() over (order by '</span><span class="token operator">+</span> <span class="token variable">@OrderString</span> <span class="token operator">+</span><span class="token string">') as rowId,'</span><span class="token operator">+</span><span class="token variable">@ReFieldsStr</span><span class="token operator">+</span><span class="token string">' from '</span><span class="token operator">+</span> <span class="token variable">@TableName</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--查询语句</span>    <span class="token comment" spellcheck="true">--</span>    <span class="token keyword">IF</span> <span class="token punctuation">(</span><span class="token variable">@WhereString</span><span class="token operator">!</span> <span class="token operator">=</span> <span class="token string">''</span> <span class="token operator">or</span> <span class="token variable">@WhereString</span><span class="token operator">!=</span><span class="token boolean">null</span><span class="token punctuation">)</span>        <span class="token keyword">BEGIN</span>            <span class="token keyword">SET</span> <span class="token variable">@TotalCountSql</span><span class="token operator">=</span><span class="token variable">@TotalCountSql</span> <span class="token operator">+</span> <span class="token string">'  where '</span><span class="token operator">+</span> <span class="token variable">@WhereString</span><span class="token punctuation">;</span>            <span class="token keyword">SET</span> <span class="token variable">@SqlString</span> <span class="token operator">=</span><span class="token variable">@SqlString</span><span class="token operator">+</span> <span class="token string">'  where '</span><span class="token operator">+</span> <span class="token variable">@WhereString</span><span class="token punctuation">;</span>                    <span class="token keyword">END</span>    <span class="token comment" spellcheck="true">--第一次执行得到</span>    <span class="token comment" spellcheck="true">--IF(@TotalRecord is null)</span>    <span class="token comment" spellcheck="true">--   BEGIN</span>           <span class="token keyword">EXEC</span> sp_executesql <span class="token variable">@totalCountSql</span><span class="token punctuation">,</span>N<span class="token string">'@TotalRecord int out'</span><span class="token punctuation">,</span><span class="token variable">@TotalRecord</span> output<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--返回总记录数</span>    <span class="token comment" spellcheck="true">--  END</span>    <span class="token comment" spellcheck="true">----执行主语句</span>    <span class="token keyword">set</span> <span class="token variable">@SqlString</span> <span class="token operator">=</span><span class="token string">'select * from '</span> <span class="token operator">+</span> <span class="token variable">@SqlString</span> <span class="token operator">+</span> <span class="token string">') as t where rowId between '</span> <span class="token operator">+</span> ltrim<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token variable">@StartRecord</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' and '</span> <span class="token operator">+</span>  ltrim<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token variable">@EndRecord</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">Exec</span><span class="token punctuation">(</span><span class="token variable">@SqlString</span><span class="token punctuation">)</span>    <span class="token keyword">END</span><span class="token comment" spellcheck="true">--调用分页存储过程book_page</span><span class="token keyword">exec</span> book_page <span class="token string">'books'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">'book_id'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--</span><span class="token keyword">declare</span> <span class="token variable">@totalCount</span> <span class="token keyword">int</span><span class="token keyword">exec</span> book_page <span class="token string">'books'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">'book_id'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">@totalCount</span> output<span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token variable">@totalCount</span> <span class="token keyword">as</span> totalCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--总记录数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参考博客：</strong></p><p><a href="https://www.cnblogs.com/selene/p/4483612.html" target="_blank" rel="noopener">https://www.cnblogs.com/selene/p/4483612.html</a></p><h2 id="评论列表"><a href="#评论列表" class="headerlink" title="评论列表"></a>评论列表</h2><h4 id="1楼-2016-01-21-09-57-柚子茶丶"><a href="#1楼-2016-01-21-09-57-柚子茶丶" class="headerlink" title="1楼 2016-01-21 09:57 柚子茶丶"></a>1楼 2016-01-21 09:57 柚子茶丶</h4><p>exec searchBooks 1; 这句话报错 说超出 最大嵌套层数 ，本人小白</p><hr><h4 id="2楼-2016-01-21-10-01-柚子茶丶"><a href="#2楼-2016-01-21-10-01-柚子茶丶" class="headerlink" title="2楼 2016-01-21 10:01 柚子茶丶"></a>2楼 2016-01-21 10:01 柚子茶丶</h4><p><code>if (exists (select * from sys.objects where name = &#39;searchBooks&#39;))drop proc searchBooksgo</code></p><p>这句话在建立存储时 ，不执行，直接建立存储过程，然后运行，exec searchBooks 1; 就不会报错。</p><hr><h4 id="3楼-2016-09-19-15-00-willxiang"><a href="#3楼-2016-09-19-15-00-willxiang" class="headerlink" title="3楼 2016-09-19 15:00 willxiang"></a>3楼 2016-09-19 15:00 willxiang</h4><p>创建无参存储过程：</p><p>这里创建存储过程的时候后边直接跟了一句执行查询的操作，如果没注意直接粘贴复制后执行存储过程会报错，<br>建议在<code>exec getAllBooks</code> 后边加一句 <code>go</code></p><hr><h4 id="4楼-2017-06-29-12-27-xs-ing"><a href="#4楼-2017-06-29-12-27-xs-ing" class="headerlink" title="4楼 2017-06-29 12:27 xs~ing"></a>4楼 2017-06-29 12:27 xs~ing</h4><p>创建带通配符的存储过程那里不是很明白，参数上面有赋值了，后面执行的时候为什么还要再赋值？是不是再赋值的时候会覆盖掉原来参数的值？我执行的时候报错“超出了存储过程、函数、触发器或视图的最大嵌套层数(最大层数为 32)。”</p><hr><h4 id="5楼-2017-10-07-20-58-hello-wind"><a href="#5楼-2017-10-07-20-58-hello-wind" class="headerlink" title="5楼 2017-10-07 20:58 hello_wind"></a>5楼 2017-10-07 20:58 hello_wind</h4><p>@ happy萍儿<br>这里我尝试回复一下：<br>1）带通配符的存储过程，创建存储过程时给变量的赋值为默认值，执行存储过程时没有另行赋值时这里会起作用，比如本例中,执行<code>exec charBooks</code>则等同于执行<code>exec charBooks &#39;金%&#39;,&#39;%&#39;</code>。<br>2）报错问题参见12/13/15楼的回答。</p><hr><h4 id="6楼-2019-03-25-10-24-KevinZhyp"><a href="#6楼-2019-03-25-10-24-KevinZhyp" class="headerlink" title="6楼 2019-03-25 10:24 KevinZhyp"></a>6楼 2019-03-25 10:24 KevinZhyp</h4><p>–1.创建无参存储过程</p><p><code>if (exists (select * from sys.objects where name = &#39;getAllBooks&#39;))drop proc proc_get_studentgocreate procedure getAllBooksas</code><br><code>select * from books;</code></p><p>–调用,执行存储过程</p><p><code>exec getAllBooks;</code></p><p>这个里面为什么判断了‘getAllBooks’，然后drop的是‘proc_get_student’？</p><hr><h4 id="7楼-2019-05-10-16-46-熊猫大侠FB"><a href="#7楼-2019-05-10-16-46-熊猫大侠FB" class="headerlink" title="7楼 2019-05-10 16:46 熊猫大侠FB"></a>7楼 2019-05-10 16:46 熊猫大侠FB</h4><p>@ KevinZhyp<br>作者这里是写错了, 应该是 <code>drop getAllBooks</code> 才对<del>~</del>其他代码都可完美运行</p><hr><h4 id="8楼-2021-06-18-17-56-思复诵"><a href="#8楼-2021-06-18-17-56-思复诵" class="headerlink" title="8楼 2021-06-18 17:56 思复诵"></a>8楼 2021-06-18 17:56 思复诵</h4><p><code>if (exists (select * from sys.objects where name = &#39;getAllBooks&#39;))drop proc proc_get_studentgocreate procedure getAllBooksasselect * from books;</code></p><p>这个有错误 drop proc 后面应该是getAllBooks</p><hr><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="在数据库创建存储过程"><a href="#在数据库创建存储过程" class="headerlink" title="在数据库创建存储过程"></a>在数据库创建存储过程</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">USE</span> <span class="token punctuation">[</span>gspcrm_MSCRM<span class="token punctuation">]</span>GO<span class="token comment" spellcheck="true">/****** Object:  StoredProcedure [dbo].[Update_deliveryline]    Script Date: 2022/7/6 16:43:42 ******/</span><span class="token keyword">SET</span> ANSI_NULLS <span class="token keyword">ON</span>GO<span class="token keyword">SET</span> QUOTED_IDENTIFIER <span class="token keyword">ON</span>GO<span class="token keyword">ALTER</span> <span class="token keyword">procedure</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>Update_deliveryline<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">---定义传入参数 中间表id</span><span class="token variable">@tempid</span> uniqueidentifier<span class="token punctuation">,</span><span class="token variable">@ownerid</span> uniqueidentifier<span class="token punctuation">,</span><span class="token variable">@owneribu</span> uniqueidentifier<span class="token keyword">as</span><span class="token comment" spellcheck="true">--定义循环总条数</span><span class="token keyword">DECLARE</span> <span class="token variable">@count</span> <span class="token keyword">INT</span><span class="token keyword">SET</span> <span class="token variable">@count</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">SELECT</span> <span class="token variable">@count</span> <span class="token operator">=</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> deliverline_temp <span class="token keyword">where</span>  tempId <span class="token operator">=</span><span class="token variable">@tempid</span><span class="token comment" spellcheck="true">--定义循环下标</span><span class="token keyword">DECLARE</span> <span class="token variable">@i</span> <span class="token keyword">INT</span><span class="token keyword">SET</span> <span class="token variable">@i</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">-- 循环</span><span class="token keyword">WHILE</span> <span class="token variable">@i</span><span class="token operator">&lt;=</span> <span class="token variable">@count</span><span class="token keyword">BEGIN</span><span class="token comment" spellcheck="true">--定义发货主档id</span><span class="token keyword">DECLARE</span> <span class="token variable">@deliveryid</span> uniqueidentifier<span class="token keyword">SELECT</span> <span class="token variable">@deliveryid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_ord_deliveryplan_id <span class="token keyword">from</span> deliverline_temp <span class="token keyword">where</span>  tempId <span class="token operator">=</span><span class="token variable">@tempid</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token variable">@deliveryid</span><span class="token comment" spellcheck="true">--定义发货明细id</span><span class="token keyword">DECLARE</span> <span class="token variable">@deliverylineid</span> uniqueidentifier<span class="token keyword">SELECT</span> <span class="token variable">@deliverylineid</span> <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_ord_deliveryplanlineid <span class="token keyword">from</span> new_ord_deliveryplanline <span class="token number">a</span>    <span class="token keyword">inner</span> <span class="token keyword">join</span> deliverline_temp <span class="token number">b</span> <span class="token keyword">on</span>    <span class="token number">a</span><span class="token punctuation">.</span>new_ord_deliveryplan_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>new_ord_deliveryplan_id   <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>new_ord_saleorder_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>new_ord_saleorder_id  <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>new_ord_saleorderline_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>new_ord_saleorderline_id  <span class="token keyword">where</span> seq <span class="token operator">=</span> <span class="token variable">@i</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>tempId <span class="token operator">=</span><span class="token variable">@tempid</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--定义当前发货数量</span>  <span class="token keyword">DECLARE</span> <span class="token variable">@new_quantity</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">select</span> <span class="token variable">@new_quantity</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_quantity <span class="token keyword">from</span> deliverline_temp <span class="token keyword">where</span>  seq <span class="token operator">=</span> <span class="token variable">@i</span> <span class="token operator">and</span> tempId <span class="token operator">=</span><span class="token variable">@tempid</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token variable">@new_quantity</span>  <span class="token comment" spellcheck="true">--定义当前订单明细id</span>  <span class="token keyword">DECLARE</span> <span class="token variable">@orderlineid</span>  uniqueidentifier  <span class="token keyword">select</span> <span class="token variable">@orderlineid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_ord_saleorderline_id <span class="token keyword">from</span> deliverline_temp <span class="token keyword">where</span>  seq <span class="token operator">=</span> <span class="token variable">@i</span> <span class="token operator">and</span> tempId <span class="token operator">=</span><span class="token variable">@tempid</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token variable">@orderlineid</span>  <span class="token comment" spellcheck="true">--定义订单id</span>  <span class="token keyword">DECLARE</span> <span class="token variable">@orderid</span>  uniqueidentifier  <span class="token keyword">select</span> <span class="token variable">@orderid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_ord_saleorder_id <span class="token keyword">from</span> deliverline_temp <span class="token keyword">where</span>  seq <span class="token operator">=</span> <span class="token variable">@i</span> <span class="token operator">and</span> tempId <span class="token operator">=</span><span class="token variable">@tempid</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">---判断定义发货明细id 是否存在</span>  <span class="token keyword">if</span>  <span class="token punctuation">(</span><span class="token variable">@deliverylineid</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>  <span class="token keyword">print</span> <span class="token string">'更新'</span>  <span class="token comment" spellcheck="true">---1.存在发货明细，进行更新处理</span>  <span class="token comment" spellcheck="true">--1.1 更新本次发货数量和承诺数量 做加法</span>  <span class="token keyword">update</span> new_ord_deliveryplanlinebase <span class="token keyword">set</span> new_quantity <span class="token operator">=</span>  new_committedquantity<span class="token operator">+</span><span class="token variable">@new_quantity</span><span class="token punctuation">,</span>new_committedquantity <span class="token operator">=</span> new_committedquantity<span class="token operator">+</span><span class="token variable">@new_quantity</span> <span class="token keyword">where</span> <span class="token variable">@deliverylineid</span> <span class="token operator">=</span> new_ord_deliveryplanlineid  <span class="token comment" spellcheck="true">--1.2更新订单明细已添加发货数量</span>  <span class="token keyword">update</span> new_ord_saleorderlinebase <span class="token keyword">set</span> new_shipmentplanadded <span class="token operator">=</span>  new_shipmentplanadded<span class="token operator">+</span><span class="token variable">@new_quantity</span>  <span class="token keyword">where</span> <span class="token variable">@orderlineid</span> <span class="token operator">=</span> new_ord_saleorderlineid  <span class="token comment" spellcheck="true">--1.3 更新可发货数量 = 订单明细当前数量 - 已添加发货数量</span>  <span class="token keyword">update</span> new_ord_saleorderlinebase <span class="token keyword">set</span> new_confirm_count <span class="token operator">=</span>  new_qty<span class="token operator">-</span> new_shipmentplanadded  <span class="token keyword">where</span> <span class="token variable">@orderlineid</span> <span class="token operator">=</span> new_ord_saleorderlineid  <span class="token comment" spellcheck="true">--1.4判断可发货数量 更新 订单发货状态</span>  <span class="token keyword">update</span>  new_ord_saleorderlinebase <span class="token keyword">set</span>  new_deliveryplanstatus <span class="token operator">=</span>  <span class="token punctuation">(</span>             <span class="token keyword">case</span>      <span class="token keyword">when</span>   new_confirm_count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">then</span> <span class="token number">3</span>      <span class="token keyword">when</span>   new_confirm_count <span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> new_confirm_count <span class="token operator">&lt;</span> new_qty    <span class="token keyword">then</span> <span class="token number">2</span>      <span class="token keyword">else</span>    <span class="token number">1</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token variable">@orderlineid</span> <span class="token operator">=</span> new_ord_saleorderlineid      <span class="token comment" spellcheck="true">--1.5更新折前金额 和折后金额</span>      <span class="token keyword">update</span> new_ord_deliveryplanlinebase <span class="token keyword">set</span> new_undiscounted <span class="token operator">=</span> new_quantity <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_actualprice <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      new_discountamount <span class="token operator">=</span> new_quantity <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">select</span> isnull<span class="token punctuation">(</span>new_actualprice<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> isnull<span class="token punctuation">(</span>new_discountrate<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      new_discountamountrmb <span class="token operator">=</span> new_quantity <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token punctuation">(</span>isnull<span class="token punctuation">(</span>new_actualprice<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> isnull<span class="token punctuation">(</span>new_discountrate<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> isnull<span class="token punctuation">(</span>exchangerate<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span>      <span class="token keyword">where</span> <span class="token variable">@deliverylineid</span> <span class="token operator">=</span> new_ord_deliveryplanlineid      <span class="token keyword">end</span>      <span class="token keyword">else</span>      <span class="token keyword">begin</span>      <span class="token comment" spellcheck="true">---2.不存在发货明细，进行创建处理</span>      <span class="token keyword">print</span> <span class="token string">'创建'</span>      <span class="token keyword">insert</span> <span class="token keyword">into</span> new_ord_deliveryplanlinebase <span class="token punctuation">(</span>        new_ord_deliveryplanlineid<span class="token punctuation">,</span>        new_name<span class="token punctuation">,</span>        new_ord_deliveryplan_id<span class="token punctuation">,</span>        new_quantity<span class="token punctuation">,</span>        new_committedquantity<span class="token punctuation">,</span>        new_businessmemo<span class="token punctuation">,</span>        new_approvalstatus<span class="token punctuation">,</span>        new_actualprice<span class="token punctuation">,</span>        new_approval_deliverydate<span class="token punctuation">,</span>        new_newest_deliverydate<span class="token punctuation">,</span>        new_product_id<span class="token punctuation">,</span>        new_qty<span class="token punctuation">,</span>        new_productnumber<span class="token punctuation">,</span>        OwnerId<span class="token punctuation">,</span>        new_discountrate<span class="token punctuation">,</span>        new_ord_saleorder_id<span class="token punctuation">,</span>        new_ord_saleorderline_id<span class="token punctuation">,</span>        new_undiscounted<span class="token punctuation">,</span>        new_discountamount<span class="token punctuation">,</span>        new_discountamountrmb<span class="token punctuation">,</span>        statecode<span class="token punctuation">,</span>        statuscode<span class="token punctuation">,</span>        CreatedOn<span class="token punctuation">,</span>        ModifiedOn<span class="token punctuation">,</span>        CreatedBy<span class="token punctuation">,</span>        ModifiedBy<span class="token punctuation">,</span>        OwningBusinessUnit<span class="token punctuation">,</span>        new_mark      <span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>        NEWID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">+</span><span class="token variable">@i</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token variable">@deliveryid</span><span class="token punctuation">,</span>        <span class="token variable">@new_quantity</span><span class="token punctuation">,</span>        <span class="token variable">@new_quantity</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_businessmemo <span class="token keyword">from</span> deliverline_temp <span class="token keyword">where</span>  seq <span class="token operator">=</span> <span class="token variable">@i</span> <span class="token operator">and</span> tempId <span class="token operator">=</span><span class="token variable">@tempid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span>  new_actualprice <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_approval_deliverydate <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_approval_deliverydate <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_product_id <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_qty <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_name <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token variable">@ownerid</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_discountrate <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token variable">@orderid</span><span class="token punctuation">,</span>        <span class="token variable">@orderlineid</span><span class="token punctuation">,</span>        <span class="token variable">@new_quantity</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_actualprice <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token variable">@new_quantity</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">select</span> isnull<span class="token punctuation">(</span>new_actualprice<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> isnull<span class="token punctuation">(</span>new_discountrate<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token variable">@new_quantity</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token punctuation">(</span>isnull<span class="token punctuation">(</span>new_actualprice<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> isnull<span class="token punctuation">(</span>new_discountrate<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> isnull<span class="token punctuation">(</span>exchangerate<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span>  new_ord_saleorderlineid <span class="token operator">=</span> <span class="token variable">@orderlineid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        DATEADD<span class="token punctuation">(</span>HOUR<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        DATEADD<span class="token punctuation">(</span>HOUR<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token variable">@ownerid</span><span class="token punctuation">,</span>        <span class="token variable">@ownerid</span><span class="token punctuation">,</span>        <span class="token variable">@owneribu</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> new_mark          <span class="token keyword">from</span> new_saleorder2memo A         <span class="token keyword">inner</span> <span class="token keyword">join</span> new_producttype B <span class="token keyword">on</span> A<span class="token punctuation">.</span>new_producttype_id2<span class="token operator">=</span>B<span class="token punctuation">.</span>new_producttypeId         <span class="token keyword">where</span> A<span class="token punctuation">.</span>statecode<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">and</span> B<span class="token punctuation">.</span>statecode<span class="token operator">=</span><span class="token number">0</span>         <span class="token operator">and</span> B<span class="token punctuation">.</span>new_code<span class="token operator">=</span><span class="token string">'506'</span> <span class="token operator">and</span> A<span class="token punctuation">.</span>new_ord_saleorder_id<span class="token operator">=</span><span class="token variable">@orderid</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">--1.2更新订单明细已添加发货数量</span>         <span class="token keyword">update</span> new_ord_saleorderlinebase <span class="token keyword">set</span> new_shipmentplanadded <span class="token operator">=</span>  new_shipmentplanadded<span class="token operator">+</span><span class="token variable">@new_quantity</span>  <span class="token keyword">where</span> <span class="token variable">@orderlineid</span> <span class="token operator">=</span> new_ord_saleorderlineid         <span class="token comment" spellcheck="true">--1.3 更新可发货数量 = 订单明细当前数量 - 已添加发货数量</span>         <span class="token keyword">update</span> new_ord_saleorderlinebase <span class="token keyword">set</span> new_confirm_count <span class="token operator">=</span>  new_qty<span class="token operator">-</span> new_shipmentplanadded  <span class="token keyword">where</span> <span class="token variable">@orderlineid</span> <span class="token operator">=</span> new_ord_saleorderlineid         <span class="token comment" spellcheck="true">--1.3判断可发货数量 更新 订单发货状态</span>         <span class="token keyword">update</span>  new_ord_saleorderlinebase <span class="token keyword">set</span>  new_deliveryplanstatus <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">case</span>         <span class="token keyword">when</span>   new_confirm_count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">then</span> <span class="token number">3</span>         <span class="token keyword">when</span>   new_confirm_count <span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> new_confirm_count <span class="token operator">&lt;</span> new_qty    <span class="token keyword">then</span> <span class="token number">2</span>         <span class="token keyword">else</span>    <span class="token number">1</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token variable">@orderlineid</span> <span class="token operator">=</span> new_ord_saleorderlineid         <span class="token keyword">end</span>         <span class="token comment" spellcheck="true">--循环一次后下标加1</span>         <span class="token keyword">SET</span> <span class="token variable">@i</span> <span class="token operator">=</span> <span class="token variable">@i</span> <span class="token operator">+</span><span class="token number">1</span>         <span class="token keyword">END</span>         <span class="token comment" spellcheck="true">--循环结束后，处理订单单头信息</span>         <span class="token comment" spellcheck="true">--1.汇总 已添加发货数量</span>         <span class="token keyword">update</span>  new_ord_saleorderbase         <span class="token keyword">set</span> new_shipmentplanadded <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span>  <span class="token function">sum</span><span class="token punctuation">(</span>isnull<span class="token punctuation">(</span>new_shipmentplanadded<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> new_ord_saleorderlinebase <span class="token keyword">where</span> new_ord_salesorder_id <span class="token operator">=</span>new_ord_saleorderid<span class="token punctuation">)</span>         <span class="token keyword">where</span> new_ord_saleorderid <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> new_ord_saleorder_id <span class="token keyword">from</span> deliverline_temp  <span class="token keyword">where</span>   tempId <span class="token operator">=</span><span class="token variable">@tempid</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">--1.2 比较已添加发货数量和总数量 赋值发货计划状态</span>         <span class="token keyword">update</span>  new_ord_saleorderbase          <span class="token keyword">set</span> new_deliveryplanstatus <span class="token operator">=</span> <span class="token punctuation">(</span>             <span class="token keyword">case</span>             <span class="token keyword">when</span>   new_shipmentplanadded <span class="token operator">=</span> new_totalqty    <span class="token keyword">then</span> <span class="token number">3</span>             <span class="token keyword">when</span>   new_shipmentplanadded <span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> new_shipmentplanadded <span class="token operator">&lt;</span> new_totalqty    <span class="token keyword">then</span> <span class="token number">2</span>      　　　　<span class="token keyword">else</span>    <span class="token number">1</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">where</span> new_ord_saleorderid <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> new_ord_saleorder_id <span class="token keyword">from</span> deliverline_temp  <span class="token keyword">where</span>   tempId <span class="token operator">=</span><span class="token variable">@tempid</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后台代码调用"><a href="#后台代码调用" class="headerlink" title="后台代码调用"></a>后台代码调用</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 存储过程名称</span><span class="token keyword">string</span> strProcName <span class="token operator">=</span> <span class="token string">@"exec Update_deliveryline @tempid,@ownerid,@owneribu"</span><span class="token punctuation">;</span><span class="token keyword">var</span> paramList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paramList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"@tempid"</span><span class="token punctuation">,</span> tempId<span class="token punctuation">)</span><span class="token punctuation">;</span>paramList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"@ownerid"</span><span class="token punctuation">,</span> ownerid<span class="token punctuation">)</span><span class="token punctuation">;</span>paramList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"@owneribu"</span><span class="token punctuation">,</span> businessunitid<span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span><span class="token function">InfoMsg</span><span class="token punctuation">(</span><span class="token string">"ownerid:"</span> <span class="token operator">+</span> ownerid<span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span><span class="token function">InfoMsg</span><span class="token punctuation">(</span><span class="token string">"owneribu:"</span> <span class="token operator">+</span> businessunitid<span class="token punctuation">)</span><span class="token punctuation">;</span>Broker<span class="token punctuation">.</span><span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span>strProcName<span class="token punctuation">,</span> paramList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储过程 </tag>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS2019代码片段初识与自定义</title>
      <link href="/20221023002.html"/>
      <url>/20221023002.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>我们在编写代码时，有时候为了省事儿，往往只需要在开发工具中输入<code>for</code> 后敲<code>Tab</code>键时即可触发代码自动补全功能，在实际开发中非常好用。</p><p>由此，我们为什么不能开发出自己的一套代码快速不全的小功能呢？</p><p>这样以后只需要敲几个字符后，按一下<code>Tab</code>键即可快速生成我们自定义的模板，可大大降低重复性的工作。</p><h3 id="参考源码路径："><a href="#参考源码路径：" class="headerlink" title="参考源码路径："></a>参考源码路径：</h3><p>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\2052\Visual C#\ </p><h2 id="标准示例"><a href="#标准示例" class="headerlink" title="标准示例"></a>标准示例</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeSnippets</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeSnippet</span> <span class="token attr-name">Format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">></span></span>for<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Shortcut</span><span class="token punctuation">></span></span>for<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Shortcut</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Description</span><span class="token punctuation">></span></span>for 循环的代码片段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Description</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Author</span><span class="token punctuation">></span></span>Microsoft Corporation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Author</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnippetTypes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnippetType</span><span class="token punctuation">></span></span>Expansion<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SnippetType</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnippetType</span><span class="token punctuation">></span></span>SurroundsWith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SnippetType</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SnippetTypes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Snippet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Declarations</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Literal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ID</span><span class="token punctuation">></span></span>index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ID</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Default</span><span class="token punctuation">></span></span>i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Default</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToolTip</span><span class="token punctuation">></span></span>索引<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToolTip</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Literal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Literal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ID</span><span class="token punctuation">></span></span>max<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ID</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Default</span><span class="token punctuation">></span></span>length<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Default</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToolTip</span><span class="token punctuation">></span></span>最大长度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToolTip</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Literal</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Declarations</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Code</span> <span class="token attr-name">Language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csharp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token cdata">&lt;![CDATA[for (int $index$ = 0; $index$ &lt; $max$; $index$++)        {        $selected$ $end$        }]]></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Code</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Snippet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CodeSnippet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CodeSnippets</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="相关学习文档"><a href="#相关学习文档" class="headerlink" title="相关学习文档."></a>相关学习文档.</h3><p><a href="http://www.cnblogs.com/anderslly/archive/2009/02/16/vs2008-code-snippets.html" target="_blank" rel="noopener">http://www.cnblogs.com/anderslly/archive/2009/02/16/vs2008-code-snippets.html</a></p><hr><h2 id="需要注意的点："><a href="#需要注意的点：" class="headerlink" title="需要注意的点："></a>需要注意的点：</h2><ul><li>把代码包含在 <code>&lt;![CDATA[ ]]&gt;</code>中，因为代码很可能会包含一些<strong>特殊字符</strong>。</li><li>操作方法：输入<shortcut>节中的代码简写单词后，按一次<strong>Tab键</strong>，即可直接打出代码片段，继续点击Tab键可在 <code>$</code> 包含的英文单词中（如：index,max）进行切换修改，按下<strong>回车键</strong>后，默认代码片段修改完成，且光标回到<strong>$end$</strong>位置。</shortcut></li><li>被 <code>$</code>包裹的可修改单词必须要加在节点<declarations>下的 <code>&lt;Literal&gt;</code>节点中，并维护其中的值。</declarations></li><li>相同的 <code>$</code>包裹单词，如：<strong>$index$</strong>，只要其中一个被修改，其他的也会跟着变。</li><li>文件后缀名为：  .snippet</li></ul><h2 id="编写自己的代码片段"><a href="#编写自己的代码片段" class="headerlink" title="编写自己的代码片段"></a>编写自己的代码片段</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeSnippets</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeSnippet</span> <span class="token attr-name">Format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">></span></span>ifcont<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Shortcut</span><span class="token punctuation">></span></span>ifcont<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Shortcut</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Description</span><span class="token punctuation">></span></span>if 语句的代码片段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Description</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Author</span><span class="token punctuation">></span></span>Lovebin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Author</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnippetTypes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnippetType</span><span class="token punctuation">></span></span>Expansion<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SnippetType</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnippetType</span><span class="token punctuation">></span></span>SurroundsWith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SnippetType</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SnippetTypes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Snippet</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Code</span> <span class="token attr-name">Language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csharp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[if ($entity$.Contains("$new_b$"))  {    $selected$ $end$  }]]></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Code</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Declarations</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Literal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ID</span><span class="token punctuation">></span></span>entity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ID</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToolTip</span><span class="token punctuation">></span></span>实体表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToolTip</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Default</span><span class="token punctuation">></span></span>entity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Default</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Literal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Literal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ID</span><span class="token punctuation">></span></span>new_b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ID</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToolTip</span><span class="token punctuation">></span></span>字段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToolTip</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Default</span><span class="token punctuation">></span></span>new_b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Default</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Literal</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Declarations</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Snippet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CodeSnippet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeSnippet</span> <span class="token attr-name">Format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">></span></span>Getstring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Shortcut</span><span class="token punctuation">></span></span>Getstring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Shortcut</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Description</span><span class="token punctuation">></span></span>代码片段string<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Description</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Author</span><span class="token punctuation">></span></span>Lovebin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Author</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnippetTypes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnippetType</span><span class="token punctuation">></span></span>Expansion<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SnippetType</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnippetType</span><span class="token punctuation">></span></span>SurroundsWith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SnippetType</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SnippetTypes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Snippet</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Code</span> <span class="token attr-name">Language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csharp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[$entity$.GetAttributeValue&lt;string>("$filedname$");$end$]]></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Code</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Declarations</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Literal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ID</span><span class="token punctuation">></span></span>filedname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ID</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToolTip</span><span class="token punctuation">></span></span>字段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToolTip</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Default</span><span class="token punctuation">></span></span>filedname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Default</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Literal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Literal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ID</span><span class="token punctuation">></span></span>entity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ID</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToolTip</span><span class="token punctuation">></span></span>实体表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToolTip</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Default</span><span class="token punctuation">></span></span>entity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Default</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Literal</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Declarations</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Snippet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CodeSnippet</span><span class="token punctuation">></span></span>  .....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CodeSnippets</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 代码片段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象方法与虚方法的区别</title>
      <link href="/20221022001.html"/>
      <url>/20221022001.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、抽象方法："><a href="#一、抽象方法：" class="headerlink" title="一、抽象方法："></a>一、抽象方法：</h2><p>只在抽象类中定义，方法修饰符不能使用 <code>private</code> ,  <code>virtual</code>,  <code>static</code>. </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">People</span>   <span class="token comment" spellcheck="true">//声明一个抽象类</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//抽象方法只能定义在抽象类中。</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>People   <span class="token comment" spellcheck="true">//继承抽象类</span><span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//重写抽象类的抽象方法</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"好好学习，天天向上!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Student t<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化派生类</span>        People  p<span class="token operator">=</span> t<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//使用派生类对象实例化抽象类</span>        <span class="token comment" spellcheck="true">//以上两句等价于  People p = new Student();//使用派生类对象实例化抽象类；</span>        p<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用抽象类对象调用抽象类中的抽象方法study    </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>(1)象方法只能声明在抽象类中，使用关键字<code>abstract</code></p><p>(2)抽象类中的抽象方法必须被子类重写。</p><p>【抽象方法没有方法体,子类必须重写方法体!!，因此抽象方法可以看成是一个没有方法体的虚方法】</p><h2 id="二、虚方法："><a href="#二、虚方法：" class="headerlink" title="二、虚方法："></a>二、虚方法：</h2><p>使用virtual修饰的方法：<br>虚方法可以有方法体。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseClass</span>         <span class="token comment" spellcheck="true">//创建一个基类</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">string</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//使用virtual关键字创建父类中的虚方法</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"父类虚方法体"</span><span class="token punctuation">:</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span><span class="token punctuation">:</span>BaseClass    <span class="token comment" spellcheck="true">//子类继承父类</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">string</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//子类重写父类虚方法</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"重写父类虚方法!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的示例：父类中的虚方法被派生类重写了。<br>注意事项：</p><ul><li><strong>virtual</strong>修饰符不能与<code>private、static、abstract、override</code>修饰符同时使用。</li><li><strong>override</strong>修饰符不能与<code>new 、static、virtual</code>修饰符同时使用，并且重写方法只能用于重写基类中的虚方法。</li></ul><p>虚函数的限制：</p><ul><li>虚函数仅适用于有继承关系的类对象，所以只有类的成员函数才能说明为虚函数；</li><li>静态成员函数、内联函数、构造函数不能是虚函数；</li><li>析构函数可以是虚函数。</li></ul><h2 id="三、两者区别："><a href="#三、两者区别：" class="headerlink" title="三、两者区别："></a>三、两者区别：</h2><p>总结：抽象方法是只有方法名称，没有方法体（也就是没有方法具体实现），子类必须重写父类抽象方法；<br>虚函数是该方法有方法体，但是子类可以覆盖，也可不覆盖。<br>（1）虚方法有方法体，抽象方法没有方法体。抽象方法是一种强制派生类覆盖的方法，否则派生类将不能被实例化；<br>（2）抽象方法只能在抽象类中声明，虚方法不是；<br>（3）派生类必须重写抽象类中的抽象方法，虚方法则不必要。</p><hr><h2 id="四、abstract详细讲解"><a href="#四、abstract详细讲解" class="headerlink" title="四、abstract详细讲解"></a>四、abstract详细讲解</h2><p>abstract可以用来修饰<strong>类、方法、属性、索引器</strong>、<strong>时间</strong>，这里<strong>不包括字段</strong>. 使用abstrac修饰的类,该类只能作为其他类的基类,不能实例化，即不能new一个对象。而且abstract修饰的成员在派生类中必须全部实现，<strong>不允许部分实现</strong>，否则编译异常. 如:</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">namespace</span> ConsoleApplication <span class="token punctuation">{</span> 　　<span class="token keyword">class</span> <span class="token class-name">Program</span> 　　<span class="token punctuation">{</span> 　　　　<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> 　　　　<span class="token punctuation">{</span> 　　　　　　BClass b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 　　　　　　b<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 　　　　<span class="token punctuation">}</span> 　　<span class="token punctuation">}</span> 　　<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/pictures/202210/1655887295834-ef54a43d-f79a-4455-ad3c-99c3e93121c1.png" alt>                            <img src="/pictures/202210/1655887081835-71a33ec5-0188-4dc8-b1bc-0b85857a04d0.png" alt></p><h3 id="抽象类拥有如下特征"><a href="#抽象类拥有如下特征" class="headerlink" title="抽象类拥有如下特征:"></a>抽象类拥有如下特征:</h3><ol><li><p>抽象类不能被实例化, 但可以有实例构造函数, 类是否可以实例化取决于是否拥有实例化的权限 (对于抽象类的权限是abstract, 禁止实例化),即使不提供构造函数, 编译器也会提供默认构造函数;</p></li><li><p>抽象类可以包含抽象方法和访问器;</p></li><li><p>抽象类不能使用sealed修饰, sealed意为不能被继承;</p></li><li><p>所有继承自抽象类的非抽象类必须实现所有的抽象成员,包括方法,属性,索引器,事件;</p></li></ol><h3 id="abstract修饰的方法有如下特征"><a href="#abstract修饰的方法有如下特征" class="headerlink" title="abstract修饰的方法有如下特征:"></a>abstract修饰的方法有如下特征:</h3><ol><li><p>抽象方法即是虚拟方法(隐含);</p></li><li><p>抽象方法只能在抽象类中声明;</p></li><li><p>因为抽象方法只是声明, 不提供实现, 所以方法只以分号结束,没有方法体,即没有花括号部分;如<br>public abstract void MyMethod();</p></li><li><p>override修饰的覆盖方法提供实现,且只能作为非抽象类的成员;</p></li><li><p>在抽象方法的声明上不能使用virtual或者是static修饰.即不能是静态的,又因为abstract已经是虚拟的,无需再用virtual强调.</p></li></ol><h3 id="抽象属性与抽象方法的不同："><a href="#抽象属性与抽象方法的不同：" class="headerlink" title="抽象属性与抽象方法的不同："></a>抽象属性与抽象方法的不同：</h3><p>抽象属性尽管在行为上与抽象方法相似,但仍有有如下不同:</p><ol><li><p>不能在静态属性上应用abstract修饰符;</p></li><li><p>抽象属性在非抽象的派生类中覆盖重写,使用override修饰符;</p></li></ol><h3 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口:"></a>抽象类与接口:</h3><ol><li>抽象类必须提供所有接口成员的实现;</li><li>继承接口的抽象类可以将接口的成员映射位抽象方法.</li></ol><h3 id="抽象类实例分析："><a href="#抽象类实例分析：" class="headerlink" title="抽象类实例分析："></a>抽象类实例分析：</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">interface</span> <span class="token class-name">I</span> <span class="token punctuation">{</span>     <span class="token keyword">void</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">:</span>I <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 抽象类实例<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// abstract_keyword.cs </span><span class="token comment" spellcheck="true">// 抽象类 </span><span class="token keyword">using</span> System<span class="token punctuation">;</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseClass</span> <span class="token comment" spellcheck="true">// 抽象类 </span><span class="token punctuation">{</span>     <span class="token keyword">protected</span> <span class="token keyword">int</span> _x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抽象类可以定义字段,但不可以是抽象字段,也没有这一说法. </span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> _y <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">BaseClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//可以定义实例构造函数,仅供派生的非抽象类调用; </span>    <span class="token punctuation">{</span>                       <span class="token comment" spellcheck="true">//这里显式提供构造函数,编译器将不再提供默认构造函数. </span>        fielda <span class="token operator">=</span> i<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token function">BaseClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> fielda<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> fieldsa <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">AbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抽象方法 </span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> X <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//抽象属性 </span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> Y <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">string</span> IdxString <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//抽象属性 </span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">char</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">int</span> i<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//抽象索引器 </span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DerivedClass</span> <span class="token punctuation">:</span> BaseClass <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">string</span> idxstring<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> fieldb<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//如果基类中没有定义无参构造函数,但存在有参数的构造函数, </span>    <span class="token comment" spellcheck="true">//那么这里派生类得构造函数必须调用基类的有参数构造函数,否则编译出错 </span>    <span class="token keyword">public</span> <span class="token function">DerivedClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span>     <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这里的:base(p)可省略,因为基类定义了默认的无参构造函数 </span>    <span class="token punctuation">{</span>         fieldb <span class="token operator">=</span> p<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">string</span> IdxString <span class="token comment" spellcheck="true">//覆盖重新属性 </span>    <span class="token punctuation">{</span>         <span class="token keyword">get</span>        <span class="token punctuation">{</span>             <span class="token keyword">return</span> idxstring<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">set</span>        <span class="token punctuation">{</span>             idxstring <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">char</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">int</span> i<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//覆盖重写索引器 </span>    <span class="token punctuation">{</span>         <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> IdxString<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">AbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         _x<span class="token operator">++</span><span class="token punctuation">;</span>         _y<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">int</span> X <span class="token comment" spellcheck="true">// 覆盖重写属性</span>    <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">{</span> <span class="token keyword">return</span> _x <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">int</span> Y <span class="token comment" spellcheck="true">// 覆盖重写属性</span>    <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">{</span> <span class="token keyword">return</span> _y <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        DerivedClass o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DerivedClass</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">AbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"x = {0}, y = {1}"</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>X<span class="token punctuation">,</span> o<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> abstract </tag>
            
            <tag> virtual </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解BUG心得分享</title>
      <link href="/20221023001.html"/>
      <url>/20221023001.html</url>
      
        <content type="html"><![CDATA[<h1 id="不常见报错"><a href="#不常见报错" class="headerlink" title="不常见报错"></a>不常见报错</h1><h2 id="一、调用HiddenApi报错"><a href="#一、调用HiddenApi报错" class="headerlink" title="一、调用HiddenApi报错"></a>一、调用HiddenApi报错</h2><p>There is no active transaction. This error is usually caused by custom plug-ins that ignore errors from service calls and continue processing.</p><p><strong>汉译：</strong></p><p>没有活动事务。此错误通常由忽略服务调用错误并继续处理的自定义插件引起。</p><ul><li><p>简单方式是“<strong>重新生成</strong>”，看是否编译通过。一般是有语法错误，导致插件并没有上传成功。</p></li><li><p>其他原因：可以去掉try……catch，使其显示更清晰的报错信息。</p></li></ul><h2 id="二、数组null-Length报错"><a href="#二、数组null-Length报错" class="headerlink" title="二、数组null.Length报错"></a>二、数组null.Length报错</h2><p><strong>自定义页面中：</strong></p><p>Cannot read properties of undefined (reading ‘length’)</p><p><strong>解决方案：</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp">下面是我的处理这种模糊问题的处理思路。（注释排除法）一、排除 js 内的 所有的xxx<span class="token punctuation">.</span>length 的 变量是否是数组类型。二、排除 html 代码上是否引用过xxx<span class="token punctuation">.</span>length 。如果以上注释了排除还是报错的话。还需要关注的就是 v<span class="token operator">-</span><span class="token keyword">for</span> ，因为代码再执行到 v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,index) in arry"</span> 这里时，如果arry不是个数组就会导致报错 xxxx<span class="token punctuation">.</span>length 找不到，因为渲染的时候会内部运行 <span class="token keyword">for</span> 循环就会用到 xxx<span class="token punctuation">.</span>length。这个是不能很快直观的能处理到的隐藏问题。三、element CheckboxGroup组件没有v<span class="token operator">-</span>model的时候也会报错。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题重现：</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                 <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>new_commerceforms.Name<span class="token punctuation">"</span></span>                 <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>贸易方式<span class="token punctuation">"</span></span>                 <span class="token attr-name">sortable</span>                 <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                 <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>130<span class="token punctuation">"</span></span>                 <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span>               <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.isEdit<span class="token punctuation">"</span></span>               <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.new_commerceforms.Value<span class="token punctuation">"</span></span>               <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>new_commerceformsOnchange<span class="token punctuation">"</span></span>               <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请选择<span class="token punctuation">"</span></span>               <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>                 <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in scope.row.new_commerceforms.**Options**<span class="token punctuation">"</span></span>                 <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>                 <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.Name<span class="token punctuation">"</span></span>                 <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.Value<span class="token punctuation">"</span></span>                 <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!scope.row.isEdit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{      scope.row.new_commerceforms.Name      }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后台写法必须是：PicklistModel写法"><a href="#后台写法必须是：PicklistModel写法" class="headerlink" title="后台写法必须是：PicklistModel写法"></a>后台写法必须是：PicklistModel写法</h4><h2 id="三、向数据库插入数据，主键重复报错"><a href="#三、向数据库插入数据，主键重复报错" class="headerlink" title="三、向数据库插入数据，主键重复报错"></a>三、向数据库插入数据，主键重复报错</h2><p>System.Exception: 违反了 PRIMARY KEY 约束“PK_new_deliverycarBase”。不能在对象“dbo.new_deliverycarBase”中插入重复键。重复键值为 (5daf6081-2dad-4e08-88b7-0c26a462f1b4)。</p><p><strong>解法一：</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> e <span class="token keyword">in</span> ec<span class="token punctuation">.</span>Entities<span class="token punctuation">)</span><span class="token punctuation">{</span>    ………………        table<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> car <span class="token keyword">in</span> carec<span class="token punctuation">.</span>Entities<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ………………            table<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>row1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>Broker<span class="token punctuation">.</span><span class="token function">BatchInsert</span><span class="token punctuation">(</span><span class="token string">"new_deliverycarBase"</span><span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong>在foreach第二次插入数据之前，需要把上一次的 <code>Rows</code> 数据清空，否侧会造成主键重复。</p><p><strong>解法二：</strong> 正解</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> e <span class="token keyword">in</span> ec<span class="token punctuation">.</span>Entities<span class="token punctuation">)</span><span class="token punctuation">{</span>    ………………           <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> car <span class="token keyword">in</span> carec<span class="token punctuation">.</span>Entities<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ………………                table<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>row1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>Broker<span class="token punctuation">.</span><span class="token function">BatchInsert</span><span class="token punctuation">(</span><span class="token string">"new_deliverycarBase"</span><span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong> 累加处理完所有的<code>Rows</code>数据后，在循环的外面插入数据，就不会造成主键重复了。</p><h1 id="未能加载文件或程序集"><a href="#未能加载文件或程序集" class="headerlink" title="未能加载文件或程序集"></a>未能加载文件或程序集</h1><p><img src="/pictures/202210/1650723277947-41cc03cb-2096-4c5d-b466-66425d8552de.png" alt></p><ul><li><p><strong>尝试一</strong>：该报错出现在Controller调用的方法中，一般可以尝试去掉Command方法中的<strong>try{}catch(){}</strong> </p></li><li><p><strong>尝试二</strong>：如果是出现在Command方法中，在某一个调用接口的方法处抛出错误，最大可能是，接口不通导致</p></li><li><p><strong>正解</strong>：Json版本不匹配，或者crm.common版本不匹配等；升级版本或降级。</p></li></ul><h1 id="使用SQL查数据需配置DbDriver"><a href="#使用SQL查数据需配置DbDriver" class="headerlink" title="使用SQL查数据需配置DbDriver"></a>使用SQL查数据需配置DbDriver</h1><p>报错1：<strong>ConnectionString can not be NULL</strong></p><p>报错2：<strong>get DbSourceConfigItem error</strong></p><p><strong>解决办法:</strong></p><ol><li><p>查找XML的config文件：RekTec.XStudio.<strong>Data.DbSourceConfig</strong>.xml.config</p></li><li><p>添加/修改ConnectionString标签</p></li><li><p>查看标签DbSource里面的值是否与DbSourceConfigItem标签里面的Name属性值对应</p></li></ol><p><strong>案例：</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DbSourceConfig</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsd</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DbSource</span><span class="token punctuation">></span></span>**portal**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DbSource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemList</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Portal 数据库连接字符串--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DbSourceConfigItem</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Name</span><span class="token punctuation">></span></span>**portal**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DriverType</span><span class="token punctuation">></span></span>sqlserver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DriverType</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ConnectionString</span><span class="token punctuation">></span></span>**Password=YTp@ssw0rd;User ID=sa;Initial Catalog=ytcrmdev_MSCRM;Data Source=10.66.227.81**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ConnectionString</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CommandTimeOut</span><span class="token punctuation">></span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CommandTimeOut</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ConnectionTimeOut</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ConnectionTimeOut</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DbSourceConfigItem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemList</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DbSourceConfig</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实例对象位置放错，导致产生重复性数据"><a href="#实例对象位置放错，导致产生重复性数据" class="headerlink" title="实例对象位置放错，导致产生重复性数据"></a>实例对象位置放错，导致产生重复性数据</h1><p>数据查出来是两条以上，但接收的值虽然也是两条，但一直都是返回结果的最后一条，且两条数据一模一样 原因在于：在new一个model对象的时候，没有在循环里面，而是放在了外面，从而引发了数据异常。</p><p>目标数据：</p><pre class="line-numbers language-sql"><code class="language-sql">YT023210903    <span class="token number">1</span>  <span class="token number">3000.00</span>YT21096210858  <span class="token number">1</span>  <span class="token number">900.00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而实际接收到的数据：<strong>为重复数据</strong></p><p><strong>还可以尝试用去重方法取实验，如果不起作用就可以说明这个问题。</strong></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>  <span class="token property">"new_customsinvoiceno"</span><span class="token operator">:</span> <span class="token string">"YT21096210858"</span><span class="token punctuation">,</span>  <span class="token property">"Tradingway"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"Price"</span><span class="token operator">:</span> <span class="token number">900.0000</span><span class="token punctuation">,</span>  <span class="token property">"new_parentname"</span><span class="token operator">:</span> <span class="token string">"new_customsclearance"</span><span class="token punctuation">,</span>  <span class="token property">"new_entityId"</span><span class="token operator">:</span> <span class="token string">"750D68F1-9A0B-EC11-A140-005056A4763A"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token property">"new_customsinvoiceno"</span><span class="token operator">:</span> <span class="token string">"YT21096210858"</span><span class="token punctuation">,</span>  <span class="token property">"Tradingway"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"Price"</span><span class="token operator">:</span> <span class="token number">900.0000</span><span class="token punctuation">,</span>  <span class="token property">"new_parentname"</span><span class="token operator">:</span> <span class="token string">"new_customsclearance"</span><span class="token punctuation">,</span>  <span class="token property">"new_entityId"</span><span class="token operator">:</span> <span class="token string">"750D68F1-9A0B-EC11-A140-005056A4763A"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决方案：</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">foreach</span> <span class="token punctuation">(</span>var item in vehicleGroup<span class="token punctuation">)</span><span class="token punctuation">{</span>    FileAttachmentModel file <span class="token operator">=</span> new <span class="token function">FileAttachmentModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须放在循环内部，放在外部每循环一遍相当于替换一遍</span>    file<span class="token punctuation">.</span>new_customsinvoiceno <span class="token operator">=</span> item<span class="token punctuation">.</span>new_customsinvoiceno<span class="token punctuation">;</span>    file<span class="token punctuation">.</span>Tradingway <span class="token operator">=</span> item<span class="token punctuation">.</span>new_tradingway<span class="token punctuation">;</span>    file<span class="token punctuation">.</span>Price <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Price<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    file<span class="token punctuation">.</span>new_parentname <span class="token operator">=</span> entityName<span class="token punctuation">;</span>    file<span class="token punctuation">.</span>new_entityId <span class="token operator">=</span> entityId<span class="token punctuation">;</span>    invoicenoList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>new_customsinvoiceno<span class="token punctuation">)</span><span class="token punctuation">;</span>    fileAttachmentModels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><ul><li>大多数情况下，实例化对象都必须放在循环里面。</li></ul><h1 id="Vue时间组件选择时间为UTC时间"><a href="#Vue时间组件选择时间为UTC时间" class="headerlink" title="Vue时间组件选择时间为UTC时间"></a>Vue时间组件选择时间为UTC时间</h1><p>如这种格式：2021/11/29T16:00:00   或者：11/29/2021 16:00:00</p><p>后端时间需要取本地时间，加8小时即可。</p><pre class="line-numbers language-csharp"><code class="language-csharp">DateTime time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> a <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>new_plantime<span class="token punctuation">,</span> <span class="token keyword">out</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    shipplan<span class="token punctuation">[</span><span class="token string">"new_plantime"</span><span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">ToLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Log<span class="token punctuation">.</span><span class="token function">DebugMsg</span><span class="token punctuation">(</span><span class="token string">"传入参数时间："</span> <span class="token operator">+</span> model<span class="token punctuation">.</span>new_plantime<span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span><span class="token function">DebugMsg</span><span class="token punctuation">(</span><span class="token string">"输出参数时间："</span> <span class="token operator">+</span> time<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span><span class="token function">DebugMsg</span><span class="token punctuation">(</span><span class="token string">"处理后时间ToUniversalTime："</span> <span class="token operator">+</span> time<span class="token punctuation">.</span><span class="token function">ToUniversalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span><span class="token function">DebugMsg</span><span class="token punctuation">(</span><span class="token string">"处理后时间ToLocalTime："</span> <span class="token operator">+</span> time<span class="token punctuation">.</span><span class="token function">ToLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>传入参数时间：<span class="token number">11</span><span class="token operator">/</span><span class="token number">29</span><span class="token operator">/</span><span class="token number">2021</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span>输出参数时间：<span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">29</span> <span class="token number">04</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span>处理后时间ToUniversalTime：<span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">29</span> <span class="token number">04</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span>处理后时间ToLocalTime：<span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SQL查CRM的时间字段少8小时"><a href="#SQL查CRM的时间字段少8小时" class="headerlink" title="SQL查CRM的时间字段少8小时"></a>SQL查CRM的时间字段少8小时</h1><p><strong>处理办法如下：</strong></p><pre class="line-numbers language-sql"><code class="language-sql">DATEADD<span class="token punctuation">(</span>HH<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>new_time<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--加8小时</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DATEADD<span class="token punctuation">(</span>HH<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> new_date<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">111</span> <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">--去掉时分秒  2021/01/12</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dateadd<span class="token punctuation">(</span>HH<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">dc</span><span class="token punctuation">.</span>new_shipmentdate<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--2021-01-12</span><span class="token comment" spellcheck="true">--new_time为时间字段,涉及到海外，上面的方法不能用了</span><span class="token comment" spellcheck="true">--UTC时间转本地时间：</span>DATEADD<span class="token punctuation">(</span>hour<span class="token punctuation">,</span> DATEDIFF<span class="token punctuation">(</span>hour<span class="token punctuation">,</span>GETUTCDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_time<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">--加8h</span><span class="token comment" spellcheck="true">--本地时间转UTC时间：</span>DATEADD<span class="token punctuation">(</span>hour<span class="token punctuation">,</span> DATEDIFF<span class="token punctuation">(</span>hour<span class="token punctuation">,</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>GETUTCDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_time<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="操作流程中输入参数未添加报错"><a href="#操作流程中输入参数未添加报错" class="headerlink" title="操作流程中输入参数未添加报错"></a>操作流程中输入参数未添加报错</h1><p>2021-11-07T13:26:28.846 plugin Error 值不能为 null。<br>参数名: value</p><p><strong>程序在此处报错</strong></p><pre class="line-numbers language-c"><code class="language-c">NotificationFilterModel result <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span>DeserializeObject<span class="token operator">&lt;</span>NotificationFilterModel<span class="token operator">></span><span class="token punctuation">(</span>Content<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ExecutionContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/pictures/202210/1650723452065-a593c6dd-ef82-48f3-a054-1580a8693bd2.png" alt></p><h1 id="使用RibbonBox时"><a href="#使用RibbonBox时" class="headerlink" title="使用RibbonBox时"></a>使用RibbonBox时</h1><p>使用Ribbonbox自定义工具时无法加载解决方案</p><p><strong>报错信息如下：</strong></p><pre class="line-numbers language-plain"><code class="language-plain">解决方案[ZGJ_ _sIn_ flowtool]的ribbon创建失败: Error: 方法"DynamicClass.lambda method(System.Runtime.CompilerServices.Closure)"尝试访问方法"Microsof.Xrm.Sdk.Client.OrganizationServiceContext.CreateSequentialGuid0”失败。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决办法：</strong></p><pre class="line-numbers language-plain"><code class="language-plain">选择实体的时候，把【✓】全部去掉，最后选择【否】即可。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切忌删除某些东西以保留一个目标实体，虽然看起来行，但其实不可行。</p><h1 id="邮件提醒在消息中无法显示"><a href="#邮件提醒在消息中无法显示" class="headerlink" title="邮件提醒在消息中无法显示"></a>邮件提醒在消息中无法显示</h1><p><strong>可能原因如下：</strong></p><ul><li><p>代码没有报错的前提下 </p></li><li><ul><li>由于默认标题字符串长度为100，内容字符串长度为1000，明细中也同样如此； 当超出字符串最大限制的时候，则消息就无法显示，需手动调整长度。 在<strong>服务器中的log文件夹</strong>查看时，会出现以下报错信息:</li></ul></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">2021</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">06</span> <span class="token number">16</span>:<span class="token number">00</span>:<span class="token number">00.008</span> 执行jobdc8e7461<span class="token number">-0954</span><span class="token operator">-</span><span class="token number">ec11</span><span class="token operator">-</span><span class="token number">a13e</span><span class="token operator">-</span><span class="token number">005056a43d65</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">06</span> <span class="token number">16</span>:<span class="token number">00</span>:<span class="token number">22.566</span> A validation error occurred<span class="token punctuation">.</span>  The length <span class="token keyword">of</span> the <span class="token string">'new_content'</span> attribute <span class="token keyword">of</span> the <span class="token string">'new_notification'</span> entity exceeded the maximum allowed length <span class="token keyword">of</span> <span class="token string">'1000'</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>邮件发送两遍处理方法：</p><ul><li><p>方法一：登录服务器，重启异步服务； </p></li><li><p>方法二： 修改插件异步改为同步； </p></li><li><ul><li>消息提醒默认为异步执行，可以尝试将<strong>异步改为同步</strong>，如果不行就可能是服务器异步执行有问题 插件注册步骤位置： (Assembly)RekTec.Crm.Plugin.Notification |  (Plugin)RekTec.Crm.Plugin.Notification.<strong>new_remind_task_monitor</strong> |  (Step)RekTec.Crm.Plugin.Remind(<strong>QGWJBGTJ_001</strong>):To Update <strong>new_liquidationattchange</strong> 默认： Asynchronous(<strong>异步</strong>)      Server 改为： Synchronous(<strong>同步</strong>)       Server<br><img src="/pictures/202210/1650723492445-3a3ad70c-683b-4110-b59d-8b5c1399c5ec.png" alt><br><img src="/pictures/202210/1650723504496-f3429fdb-bffa-4daf-8f4e-457c8c623ee0.png" alt></li></ul></li></ul><h1 id="代码执行速度过慢问题："><a href="#代码执行速度过慢问题：" class="headerlink" title="代码执行速度过慢问题："></a>代码执行速度过慢问题：</h1><p>自定义自动编号代码执行速度过慢问题</p><p><strong>优化方案：</strong></p><pre class="line-numbers language-plain"><code class="language-plain">将**组织服务**的查询、更新数据库形式，改为**SQL**执行，速度将提升数倍不止。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解释：</strong></p><pre class="line-numbers language-plain"><code class="language-plain">组织服务处理数据库时，同时也会涉及到【权限】的控制，以及还会【触发Plugin】等，使得在循环遍历更新数据库时，<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会严重拖慢程序的执行效率，因此不建议使用组织服务。</p><h1 id="因为字段值带有空格问题。"><a href="#因为字段值带有空格问题。" class="headerlink" title="因为字段值带有空格问题。"></a>因为字段值带有空格问题。</h1><p>因为导入数据的时候字段值带有空格而查询不到数据。</p><p>如果是后台代码处理数据，可以考虑加上去除前后空格方法<strong>Trim()</strong>。</p><h1 id="单据停用时报错"><a href="#单据停用时报错" class="headerlink" title="单据停用时报错"></a>单据停用时报错</h1><p>签核处理及签核处理步骤停用—代码控制出现的报错</p><h3 id="情景一：正常理解及操作，直接更改为停用"><a href="#情景一：正常理解及操作，直接更改为停用" class="headerlink" title="情景一：正常理解及操作，直接更改为停用"></a>情景一：正常理解及操作，直接更改为停用</h3><p>代码示例</p><pre class="line-numbers language-c"><code class="language-c">Entity crf<span class="token operator">=</span>new <span class="token function">Entity</span><span class="token punctuation">(</span><span class="token string">"new_flowapprovalcrf"</span><span class="token punctuation">,</span> crfid<span class="token punctuation">)</span><span class="token punctuation">;</span>crf<span class="token punctuation">[</span><span class="token string">"statecode"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>OrganizationService<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>crf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>删除时报错提示</strong>：</p><p><img src="/pictures/202210/1650723542818-3f225427-13d9-422a-88c2-8d473c5c6ede.png" alt></p><p>大致意思：此状态码在指定状态码中无效。</p><p>推断：写法不对，根据后面结论发现：状态描述字段也需要赋值</p><h3 id="情景二：更改停用正确方法，常用，但可能并不通用"><a href="#情景二：更改停用正确方法，常用，但可能并不通用" class="headerlink" title="情景二：更改停用正确方法，常用，但可能并不通用"></a>情景二：更改停用正确方法，常用，但可能并不通用</h3><p>代码示例</p><pre class="line-numbers language-csharp"><code class="language-csharp">SetStateRequest stepRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetStateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    EntityMoniker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EntityReference</span><span class="token punctuation">(</span><span class="token string">"new_flowapprovalcrf"</span><span class="token punctuation">,</span> crfid<span class="token punctuation">)</span><span class="token punctuation">,</span>    State <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionSetValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//可用=0，停用=1</span>    Status <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionSetValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//（状态描述）可用=1，停用=2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>OrganizationServiceAdmin<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>stepRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>未注意到列表值报错</strong>:</p><p><img src="/pictures/202210/1650723590294-6aa3af3b-4085-4099-8139-11212b192400.png" alt></p><p>大致意思：2不是实体（new_flowapprovalcrf）中有效状态码。</p><p>推断：可能不存在。</p><h3 id="情景三：获取到了列表值，但与状态不匹配报错"><a href="#情景三：获取到了列表值，但与状态不匹配报错" class="headerlink" title="情景三：获取到了列表值，但与状态不匹配报错"></a>情景三：获取到了列表值，但与状态不匹配报错</h3><p>代码示例</p><pre class="line-numbers language-c"><code class="language-c">SetStateRequest crfRequest <span class="token operator">=</span> new <span class="token function">SetStateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    EntityMoniker <span class="token operator">=</span> new <span class="token function">EntityReference</span><span class="token punctuation">(</span><span class="token string">"new_flowapprovalcrf"</span><span class="token punctuation">,</span> crfid<span class="token punctuation">)</span><span class="token punctuation">,</span>    State <span class="token operator">=</span> new <span class="token function">OptionSetValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//Active=0,Inactive=1</span>    Status <span class="token operator">=</span> new <span class="token function">OptionSetValue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//正确的是：把5改为6或7</span>    <span class="token comment" spellcheck="true">//（Active）待签核=4，已签核=5; (Inactive)待签核==6，已签核=7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>OrganizationServiceAdmin<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>crfRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>列表值与状态不匹配报错：</strong></p><p><img src="/pictures/202210/1650723609053-61794b94-c2db-4a16-9af6-1b6cc9223b00.png" alt></p><p>大致意思：5不是Inactive状态代码中的有效状态码</p><p>推断：可能不匹配。</p><h1 id="注册插件时报错常见解决思路"><a href="#注册插件时报错常见解决思路" class="headerlink" title="注册插件时报错常见解决思路"></a>注册插件时报错常见解决思路</h1><ul><li><p>是否接入了客户那边的VPN。 </p></li><li><p>是否发生了重命名操作，是的话，需要手动取消原有已注册的插件（只取消发生重命名的文件即可），然后重新注册即可。 </p></li></ul><h1 id="不间断空格"><a href="#不间断空格" class="headerlink" title="不间断空格"></a>不间断空格</h1><p>读取xml文件时，名称不能以“ ”字符(十六进制值 0x20)开头</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//正确格式</span><span class="token operator">&lt;</span>attribute name<span class="token operator">=</span><span class="token string">'new_money'</span> alias<span class="token operator">=</span><span class="token string">'AMOUNT'</span> aggregate<span class="token operator">=</span><span class="token string">'sum'</span> <span class="token operator">/</span><span class="token operator">></span><span class="token comment" spellcheck="true">//含特殊空格，错误格式</span><span class="token operator">&lt;</span>attribute name<span class="token operator">=</span><span class="token string">"new_money"</span> alias<span class="token operator">=</span><span class="token string">"money"</span> aggregate<span class="token operator">=</span><span class="token string">"sum"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：</p><pre class="line-numbers language-c"><code class="language-c">NotePad<span class="token operator">++</span> 调成XML格式，通过观察颜色来判断。  删除它们中间的特殊空格即可。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>正确</li></ul><p><img src="/pictures/202210/1650723670336-ee2b95b5-14b1-4916-b9a7-4a327c908dd9.png" alt></p><ul><li>错误：</li></ul><p><img src="/pictures/202210/1650723681386-44ed9221-82c4-42c6-996a-c28060dc5527.png" alt></p><p>不间断空格</p><p>NBSP：“<code>**Non-Breaking Space**</code>” ，不间断空格 </p><p>也称为： no-break space，non-breakable space (NBSP)， hard space（硬空格）， or fixed space</p><p>在HTML中，被编码为  或 &amp;#160，宽度和普通空格一致。 </p><p>在 Unicode 码点为 U+00A0 ， 命名为Narrow No-Break Space </p><p>在 js 中是 \xA0</p><p>NBSP 是常用的编程和网页创建的行，不打破空间上的程序或文档的空间。</p><p>特性</p><ol><li>禁止自动换行</li><li>禁止合并空白字符</li></ol><p>在SGML、HTML、TEX与LATEX，把连续的空白字符（如空格符、换行符、tab符等）视作一个空格字符。</p><p>不间断空格最重要的作用就是 换行时不被打断：</p><p>比如：Mr Green , 你肯定不希望看到换行时被打断的</p><pre class="line-numbers language-c"><code class="language-c">MrGreen<span class="token punctuation">.</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 又或者速度 12 m/s, 如果变成这样：  </p><pre class="line-numbers language-c"><code class="language-c"><span class="token number">12</span>m<span class="token operator">/</span>s<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而是即使有空格，换行后，空格前后两个词 也出现在同一行</p><h1 id="多行文本有最大数量限制"><a href="#多行文本有最大数量限制" class="headerlink" title="多行文本有最大数量限制"></a>多行文本有最大数量限制</h1><pre class="line-numbers language-latex"><code class="language-latex">往多行文本插入数据的时候，一定要注意一下这个数据量的大小与多行文本最大数量之间的关系，若数据量>大于限制量，则插入失败。多行文本的数量取值范围：0 ~ 1048576默认2000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="组织服务查询有限制，最多5000条"><a href="#组织服务查询有限制，最多5000条" class="headerlink" title="组织服务查询有限制，最多5000条"></a>组织服务查询有限制，最多5000条</h1><pre class="line-numbers language-c"><code class="language-c">QueryExpression account <span class="token operator">=</span> new <span class="token function">QueryExpression</span><span class="token punctuation">(</span><span class="token string">"account"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>account<span class="token punctuation">.</span>ColumnSet<span class="token punctuation">.</span><span class="token function">AddColumns</span><span class="token punctuation">(</span><span class="token string">"accountid"</span><span class="token punctuation">,</span> <span class="token string">"new_invoicetelephone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>account<span class="token punctuation">.</span>Criteria<span class="token punctuation">.</span><span class="token function">AddCondition</span><span class="token punctuation">(</span><span class="token string">"statecode"</span><span class="token punctuation">,</span> ConditionOperator<span class="token punctuation">.</span>Equal<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var accountList <span class="token operator">=</span> this<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">RetrieveMultiple</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>accountList<span class="token punctuation">.</span>Entities<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//客户主档数据</span>string sql <span class="token operator">=</span> @"SELECT accountid<span class="token punctuation">,</span>new_invoicetelephone<span class="token punctuation">,</span>new_invoceadress<span class="token punctuation">,</span>accountcategorycode            FROM account            WHERE statecode<span class="token operator">=</span><span class="token number">0</span> and new_filestatus<span class="token operator">=</span><span class="token number">2</span>"<span class="token punctuation">;</span>DataTable dt <span class="token operator">=</span> this<span class="token punctuation">.</span>crmBroker<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"==================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"即将初始化【{dt.Rows.Count}】条数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"==================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/pictures/202210/1650723912321-3bba888e-2782-4a1c-b831-c8b4c663ecd9.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRM </tag>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github + Hexo 搭建个人博客超详细教程</title>
      <link href="/others.html"/>
      <url>/others.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png" alt></p><p><font color="magenta" size="4"><strong>在搭建过程中遇到问题欢迎来骚扰我哈！<font color="red" size="4"> V：godxiaolong，QQ:1571504536</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~</strong></font></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/02.png" alt></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！</p></li><li><p>搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。</p></li><li><p><strong>为什么要搭建自己的博客？可以看看这三篇文章：</strong></p></li></ul><p><a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" title="为什么你应该（从现在开始就）写博客" target="_blank" rel="noopener">《为什么你应该（从现在开始就）写博客》</a>   (By 刘未鹏 | Mind Hacks)</p><p><a href="https://www.zhihu.com/question/19916345" title="为什么要自建博客？" target="_blank" rel="noopener">《为什么要自建博客？》</a>   (By 知乎)</p><p><a href="https://www.cnblogs.com/jhzhu/p/3893297.html" title="我为什么写博客" target="_blank" rel="noopener">《我为什么写博客》</a> （By 知明所以）</p><p>我们需要知道搭建博客要用到的框架。<font color="red" size="3">Hexo</font>是高效的静态站点生成框架，它基于<font color="red" size="3">Node.js</font>。我们使用<font color="red" size="3">MarkDown</font>在本地编辑我们的博客文章，通过<font color="red" size="3">Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。</p><h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><ul><li><strong>快速搭建</strong></li><li>安装<font color="red" size="3">Node.js</font></li><li>添加国内镜像</li><li>安装<font color="red" size="3">Git </font></li><li>注册<font color="red" size="3">Github</font>账号</li><li>创建<font color="red" size="3">Git</font>仓库</li><li>安装<font color="red" size="3">Hexo</font> </li><li>配置本地<font color="red" size="3">Hexo</font></li><li>连接<font color="red" size="3">Github</font>与本地 </li><li>写文章、发布文章 </li><li><font color="red" size="3">MarkDown</font>文章编辑器说明</li><li>配置个性化域名</li><li>更换自己喜欢的<font color="red" size="3">Hexo</font>主题</li><li>我的博客源代码</li><li>结语</li></ul><hr><h1 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h1><p>有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。</p><p>在这里以我的博客为例。</p><h2 id="一、下载博客源代码"><a href="#一、下载博客源代码" class="headerlink" title="一、下载博客源代码"></a>一、下载博客源代码</h2><p>大家可以直接素质二连，<font color="red" size="3">Star&amp;Fork</font>我的博客源代码：<a href="https://github.com/MUYIio/hexo-themes-matery" target="_blank" rel="noopener">https://github.com/MUYIio/hexo-themes-matery</a>，这里我给出两种下载方法：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png" alt></p><p><strong>第一种</strong>：直接<font color="red" size="3">DownLoad</font>，下载到本地就可以。（<strong>不推荐</strong>）</p><p><strong>第二种</strong>：如果你已经安装了<a href="https://git-scm.com/download/win" title="Git" target="_blank" rel="noopener">Git</a>，就可以右键单击<font color="red" size="3">Come Bash Here</font>运行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:MUYIio/hexo-themes-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将所有文件下载到本地，这个复杂一点。</p><h2 id="二、修改博客文档配置"><a href="#二、修改博客文档配置" class="headerlink" title="二、修改博客文档配置"></a>二、修改博客文档配置</h2><p>首先将我们下载的博客源代码解压，然后修改主要配置：</p><ul><li>根目录配置文件<font color="red" size="3">_config.yml</font>和主题目录配置文件<font color="red" size="3">_config.yml</font>中修改个人信息。</li><li>根目录配置文件中修改<font color="red" size="3">deploy</font>一栏的<font color="red" size="3">repository</font>。</li><li>根目录配置文件中修改<font color="red" size="3">baidu_url_submit</font>一栏的<font color="red" size="3">token</font>。</li><li>主题配置文件中修改<font color="red" size="3">gitalk</font>一栏，修改方法见正文。</li></ul><p>我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。</p><p>最后一步，<strong>本地的运行环境还是需要搭建好的</strong>，跟着下文操作到连接Github与本地，环境就算是搭建完成。</p><p><strong>本地环境搭建好之后会生成的文件：</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png" alt></p><p>然后直接把<font color="red" size="3">Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png" alt></p><p>然后在<font color="red" size="3">Hexo</font>文件夹下右键单击鼠标，点击 <font color="red" size="3">Git Bash Here</font>点击输入以下命令上传就可以了：</p><pre><code>hexo cleanhexo ghexo d</code></pre><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>了解一下什么是<font color="red" size="3">Node.js</font>：</p><blockquote><p><font color="red" size="3">Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。</p></blockquote><p>需要用到的命令：</p><pre><code>$ git --version$ node -v$ npm -v</code></pre><p><a href="https://nodejs.org/en/download/" title="Node.js" target="_blank" rel="noopener">点击此处</a>进入<font color="red" size="3">Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color="red" size="3">Next</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png" alt></p><p>检验是否安装成功：<br>按<font color="red" size="3">Win+R</font>打开命令提示符，输入<font color="red" size="3">node -v</font>和<font color="red" size="3">npm -v</font>，如果出现版本号，那么就安装成功了。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png" alt></p><h1 id="添加国内镜像"><a href="#添加国内镜像" class="headerlink" title="添加国内镜像"></a>添加国内镜像</h1><p>这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：</p><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><blockquote><p><font color="red" size="3">Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color="red" size="3">Github</font>。</p></blockquote><p><a href="https://git-scm.com/download/win" title="Git" target="_blank" rel="noopener">点击此处</a>进入Git官网下载相应版本，默认安装即可。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png" alt></p><p>参考资料：<a href="https://www.cnblogs.com/jytx/p/5602927.html" title="如何在windows下安装GIT" target="_blank" rel="noopener">《如何在windows下安装GIT》</a> (By 俊雨廷休)</p><p>检验是否安装成功：</p><p>安装完成后在命令提示符中输入<font color="red" size="3">git –version</font>验证是否安装成功</p><pre><code>git --version</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png" alt></p><h1 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h1><p><font color="red" size="3">Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，<a href="https://github.com/" title="Github" target="_blank" rel="noopener">点击此处</a>进入<font color="red" size="3">Github</font>官网点击 <font color="red" size="3">Sign Up </font>注册账户。</p><h1 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h1><p>登录<font color="red" size="3">Github</font>创建一个仓库</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png" alt></p><p>如下图所示，<strong>输入自己的项目名字，后面一定要加<font color="red" size="3">.github.io</font>后缀，<font color="red" size="3">README</font>初始化也要勾上。名称一定要和你的<font color="red" size="3">Github</font>名字完全一样，比如你<font color="red" size="3">github</font>名字叫<font color="red" size="3">A</font>，那么仓库名字一定要是<font color="red" size="3">A.github.io</font>。</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png" alt></p><p>选择一个自己喜欢的主题：<br>在上面创建的仓库里面点击<font color="red" size="3">Settings</font>（不是头像下面那个<font color="red" size="3">Settings</font>），向下拉到最后有个<font color="red" size="3">GitHub Pages</font>，点击<font color="red" size="3">Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color="red" size="3">GitHub Pages</font>，就可以预览效果啦。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png" alt></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><blockquote><p><font color="red" size="3">Hexo</font>是一款基于<font color="red" size="3">Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color="red" size="3">GitHub</font>和<font color="red" size="3">Heroku</font>上，是搭建博客的首选框架。</p></blockquote><p>选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color="red" size="3">（C/panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>，输入以下<font color="red" size="3"> npm </font>命令即可安装</p><pre><code>$ npm install hexo-cli -g</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png" alt></p><p>输入<font color="red" size="3">hexo -v</font>即可检验是否安装成功，我这里就不演示了。</p><h1 id="配置本地hexo"><a href="#配置本地hexo" class="headerlink" title="配置本地hexo"></a>配置本地hexo</h1><p>还是在刚才新建的文件夹下再新建一个<font color="red" size="3">Hexo</font>文件夹，比如我的<font color="red" size="3">（C/panakot Blog/Hexo）</font>，在<font color="red" size="3">Hexo</font>文件夹下右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>，依次输入以下<font color="red" size="3"> npm </font>命令即可初始化。</p><pre><code>hexo initnpm install</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png" alt></p><p>初始化成功生成的文件：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png" alt></p><p>接着我们输入<font color="red" size="3">hexo g</font>生成静态网页，然后输入<font color="red" size="3">hexo s</font>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，就可以预览我们的博客啦，如图：</p><p>显示以下信息说明操作正确：</p><p><code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png" alt></p><p>按<font color="red" size="3">ctrl+c</font>关闭本地服务器。</p><p><strong>我们以后常用到的<font color="red" size="3">Hexo</font>命令：</strong></p><ul><li><p><font color="red" size="3">hexo s</font>等价于 <font color="red" size="3">hexo server</font>  #<font color="red" size="3">Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p></li><li><p><font color="red" size="3">hexo g</font> 等价于 <font color="red" size="3">hexo generate</font>  #生成静态网页 (执行 $ <font color="red" size="3">hexo g</font>后会在站点根目录下生成<font color="red" size="3">public</font>文件夹,<font color="red" size="3"> hexo</font>会将”<font color="red" size="3">/blog/source/</font>“ 下面的<font color="red" size="3">.md</font>后缀的文件编译为<font color="red" size="3">.html</font>后缀的文件,存放在”<font color="red" size="3">/blog/public/ </font>“ 路径下)</p></li><li><p><font color="red" size="3">hexo d </font>等价于 <font color="red" size="3">hexo deploy</font>  #将本地数据部署到远端服务器(如<font color="red" size="3">github</font>)</p></li><li><p><font color="red" size="3">hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color="red" size="3">public</font>文件夹</p></li></ul><h1 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h1><h2 id="一、生成密钥"><a href="#一、生成密钥" class="headerlink" title="一、生成密钥"></a>一、生成密钥</h2><p>右键单击鼠标，点击 <font color="red" size="3">Git Bash Here</font>输入以下命令：</p><pre><code>git config --global user.name &quot;Name&quot;git config --global user.email &quot;Email&quot;</code></pre><p><strong><font color="red" size="3">Name</font>和<font color="red" size="3">Email</font>是我们注册<font color="red" size="3">Github</font>时的用户名和邮箱。</strong></p><p>然后生成密钥：</p><pre><code>ssh-keygen -t rsa -C &quot;Email&quot;</code></pre><p><strong><font color="red" size="3">Email</font>是我们注册<font color="red" size="3">Github</font>时的邮箱</strong></p><p>然后会出现：</p><pre><code>Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa)://到这里可以直接回车将密钥按默认文件进行存储</code></pre><p>回车之后：</p><pre><code>Enter passphrase (empty for no passphrase)://这里是要你输入密码，其实不需要输什么密码，直接回车就行Enter same passphrase again:</code></pre><p>接下来会有：</p><pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:这里是各种字母数字组成的字符串，结尾是你的邮箱The key&#39;s randomart image is:这里也是各种字母数字符号组成的字符串</code></pre><p>现在密钥已经生成，一般存放在<font color="red" size="3">（/c/Users/you/.ssh/id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：</p><pre><code> clip &lt; ~/.ssh/id_rsa.pub</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png" alt></p><h2 id="二、连接Github"><a href="#二、连接Github" class="headerlink" title="二、连接Github"></a>二、连接Github</h2><p>在<font color="red" size="3">Github</font>头像下面点击<font color="red" size="3">Settings</font>，再点击<font color="red" size="3">SSH and GPG keys</font>，新建一个<font color="red" size="3">SSH</font>，名字任意。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png" alt></p><p>然后将刚才复制的密钥添加就可以了，像这样：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png" alt></p><p><strong>本地连接Github</strong></p><p>右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了</p><pre><code>ssh -T git@github.com//注意不要做任何修改</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png" alt></p><p>用记事本打开博客根目录下的<font color="red" size="3">_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color="red" size="3">Github</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png" alt></p><p>修改最后一行的配置：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type:</code></pre><p>改为：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repository: git@github.com:panakot/panakot.github.io.git  branch: master</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png" alt></p><p>切记：</p><ul><li><strong><font color="red" size="3">repository</font>修改为你自己的<font color="red" size="3">github</font>项目地址</strong>。</li><li><strong>每一个冒号后面都有一个空格。</strong></li></ul><h1 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h1><p>首先在博客根目录下右键打开<font color="red" size="3">Git Bash Here</font>输入以下命令，安装一个扩展.</p><pre><code>npm i hexo-deployer-git</code></pre><p>然后输入下面的命令，新建一篇文章。</p><pre><code>hexo new post &quot;article title&quot;</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png" alt></p><p>然后打开<font color="red" size="3">C:\panakot Blog\Hexo\source_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color="red" size="3">.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png" alt></p><p>编写完<font color="red" size="3">markdown</font>文件后，根目录下右键打开<font color="red" size="3">Git Bash Here</font>输入<font color="red" size="3">hexo g</font>生成静态网页，然后输入<font color="red" size="3">hexo s</font>可以本地预览效果，最后输入<font color="red" size="3">hexo d</font>上传到<font color="red" size="3">github</font>上。</p><p>你的博客地址：<font color="red" size="3">https://你的用户名.github.io</font>，比如我的是：<a href="https://muyiio.github.io" target="_blank" rel="noopener">https://muyiio.github.io</a>，现在每个人都可以通过此链接访问你的博客</p><h1 id="MarkDown文章编辑器说明"><a href="#MarkDown文章编辑器说明" class="headerlink" title="MarkDown文章编辑器说明"></a>MarkDown文章编辑器说明</h1><blockquote><p>前面我们提到了使用<font color="red" size="3">MarkDown</font>编辑我们的博客文章。<font color="red" size="3"> Markdown</font> 是<font color="red" size="3"> 2004</font> 年由 <font color="red" size="3">John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color="red" size="3"> .md </font>文件可以使用支持 <font color="red" size="3">Markdown </font>语法的编辑器编辑，然后将写好的文章<font color="red" size="3">（.md文件）</font>保存到<font color="red" size="3"> \Hexo\source_posts </font>文件夹下即可。</p></blockquote><p> <font color="red" size="3">Windows </font>上推荐使用 <font color="red" size="3">MarkdownPad2 </font>或者<font color="red" size="3">小书匠</font>编辑器，<font color="red" size="3">macOS </font>上使用<font color="red" size="3"> Mou</font> 编辑器，<font color="red" size="3">Linux </font>上使用 <font color="red" size="3">Remarkable</font> 编辑器，<font color="red" size="3">Web </font>端上使用 简书。</p><p><strong><a href="http://markdownpad.com/download.html" title="MarkDown" target="_blank" rel="noopener">点击此处</a>下载<font color="red" size="3">MarkDown</font><br>，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：</strong></p><p><a href="https://www.jianshu.com/p/q81RER/" title="献给写作者的 Markdown 新手指南" target="_blank" rel="noopener">《献给写作者的 Markdown 新手指南》</a> （By 简书）</p><p><a href="https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app" title="Markdown语法图文全面详解" target="_blank" rel="noopener">《Markdown语法图文全面详解(10分钟学会)》</a>（By 黑暗星球）</p><p><a href="https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app" title="Markdown 语法手册 （完整整理版）" target="_blank" rel="noopener">《Markdown 语法手册 （完整整理版）》</a> （By witnessai1）</p><p><a href="https://sspai.com/post/25137" title="认识与入门 Markdown" target="_blank" rel="noopener">《认识与入门 Markdown》</a>（By Te_Lee）</p><p>写完文章记得在博客根目录<font color="red" size="3">Bash Here</font>输入<font color="red" size="3">hexo g</font>和<font color="red" size="3">hexo d</font>上传到网站。</p><h1 id="配置个性化域名"><a href="#配置个性化域名" class="headerlink" title="配置个性化域名"></a>配置个性化域名</h1><p>一顿操作下来，打开我们的博客还是：<font color="red" size="3"><a href="http://www.xxx.github.io" target="_blank" rel="noopener">www.xxx.github.io</a></font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color="red" size="3"><a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a> </font>。</p><p><a href="https://www.aliyun.com/" title="阿里云" target="_blank" rel="noopener">阿里云</a>和<a href="https://cloud.tencent.com/" title="腾讯云" target="_blank" rel="noopener">腾讯云</a>都可以，我的是腾讯云，购买域名后首先需要添加解析：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png" alt></p><p><strong>方法一：</strong>点击添加记录，需要添加两个记录，两个记录类型都是 <font color="red" size="3">CNAME </font>，第一个主机记录为<font color="red" size="3"> @ </font>，第二个主机记录为<font color="red" size="3"> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color="red" size="3">muyiio.github.io</font>），保存之后域名解析就完成了！</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png" alt></p><p><strong>方法二：</strong>两个记录类型为<font color="red" size="3"> A </font>，第一个主机记录为<font color="red" size="3"> @ </font>，第二个主机记录为<font color="red" size="3"> www</font>，记录值都为博客的<font color="red" size="3"> IP</font> 地址，<font color="red" size="3">IP </font>地址可以<font color="red" size="3"> cmd</font> 中输入<font color="red" size="3"> ping</font> 你的博客地址 获得（比如我的：<font color="red" size="3">ping muyiio.github.io</font>），保存之后域名解析就完成了！</p><p>参考资料：</p><p><a href="https://blog.csdn.net/it_man/article/details/9017307" title="域名解析中A记录、CNAME、MX记录、NS记录的区别和联系" target="_blank" rel="noopener">《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》</a></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png" alt></p><p><strong>不管在哪个平台购买域名，操作都大同小异，这里说明两点</strong>：</p><blockquote><p>如果你填写的是没有<font color="red" size="3">www</font>的，比如 <font color="red" size="3">muyio.com</font>，那么无论是访问<font color="red" size="3"> <a href="https://www.muyiio.com" target="_blank" rel="noopener">https://www.muyiio.com</a> </font>还是<font color="red" size="3"> <a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a></font> ，都会自动跳转到<font color="red" size="3"> <a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a></font>。</p></blockquote><blockquote><p>如果你填写的是带<font color="red" size="3">www</font>的，比如 <font color="red" size="3"><a href="http://www.muyiio.com" target="_blank" rel="noopener">www.muyiio.com</a> </font>，那么无论是访问 <font color="red" size="3"><a href="https://www.muyiio.com" target="_blank" rel="noopener">https://www.muyiio.com</a></font> 还是 <font color="red" size="3"><a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a> </font>，都会自动跳转到 <font color="red" size="3"><a href="http://www.imuyiio.com" target="_blank" rel="noopener">http://www.imuyiio.com</a></font>。</p></blockquote><p>然后打开你的<font color="red" size="3">github</font>博客项目，点击settings，拉到下面<font color="red" size="3">Custom domain</font>处，填上你自己的域名，保存就可以了。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png" alt></p><p>现在我们的项目根目录应该会出现一个名为<font color="red" size="3">CNAME</font>的文件了。如果没有的话，打开你本地博客<font color="red" size="3">/source</font>目录，我的是<font color="red" size="3">C:\Blog\Hexo\source</font>，新建<font color="red" size="3">CNAME</font>文件，<font color="red" size="3">（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color="red" size="3">hexo g、hexo d</font>上传到<font color="red" size="3">github</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png" alt></p><p>现在就可以通过我们的个性化域名：<font color="red" size="3"><a href="http://www.xxx.com、xxx.com" target="_blank" rel="noopener">www.xxx.com、xxx.com</a></font>访问自己的博客了。</p><h1 id="更换自己喜欢的Hexo主题"><a href="#更换自己喜欢的Hexo主题" class="headerlink" title="更换自己喜欢的Hexo主题"></a>更换自己喜欢的Hexo主题</h1><p>点击进入<a href="https://hexo.io/themes/" title="Hexo主题专栏" target="_blank" rel="noopener">Hexo主题专栏</a>可以看到很多<font color="red" size="3">Hexo</font>主题：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png" alt></p><p>推荐：</p><p><a href="https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app" title="几个好用的hexo主题" target="_blank" rel="noopener">几个好用的hexo主题</a> (By fail_perfectly)</p><p>这里我们以<a href="http://huangxuan.me/" title="Bean Tech" target="_blank" rel="noopener">Bean Tech</a>主题为例，下滑到底部我们可以看到他的<font color="red" size="3">GitHub</font>（<font color="red" size="3">有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png" alt></p><p>点击进入主题的<font color="red" size="3">GitHub</font>地址：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png" alt></p><p>复制该项目地址：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png" alt></p><p>然后打开<font color="red" size="3"> Hexo </font>文件夹下的<font color="red" size="3"> themes</font> 目录（如：<font color="red" size="3">C:\MUYIio Blog\Hexo\themes</font>），右键<font color="red" size="3"> Git Bash Here</font>，输入以下命令：</p><pre><code>$ git clone 此处填写你刚才复制的主题地址</code></pre><p>以我们刚才复制的为例：</p><pre><code>$ git clone https://github.com/Huxpro/huxpro.github.io</code></pre><p>下载完成后即可在<font color="red" size="3"> themes </font>目录下生成 <font color="red" size="3">hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color="red" size="3">Hexo</font> 文件夹下的配置文件 <font color="red" size="3">_config.yml </font>，找到关键字 <font color="red" size="3">theme</font>，修改参数为：<font color="red" size="3">theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），<strong>再次注意冒号后面有一个空格！</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png" alt></p><p>现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color="red" size="3"> Git Bash Here</font>，输入以下命令：</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color="red" size="3">_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color="red" size="3">C:\MUYIio Blog\Hexo_config.yml</font>），主要包含<font color="red" size="3"> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color="red" size="3">C:\MUYIio Blog\Hexo\themes\hexo-theme-matery_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color="red" size="3"> _config.yml </font>文件里都有相关注释，按需修改即可。</p><h1 id="我的博客源代码"><a href="#我的博客源代码" class="headerlink" title="我的博客源代码"></a>我的博客源代码</h1><p><strong>我的博客源代码地址：<a href="https://github.com/MUYIio/hexo-themes-matery" target="_blank" rel="noopener">https://github.com/MUYIio/hexo-themes-matery</a>，有心的话可以给个<font color="red" size="3">Star&amp;Fork</font>。</strong></p><p>下载源代码：git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:MUYIio/hexo-themes-matery.git</p><p>在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color="red" size="3">Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。</p><p>主题的原地址在这里：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。</p><p>使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。</p><table><tr><td bgcolor="orange">-----------------------------------------------------------------------------------------------------------                                                                                                                                                                                                            </td></tr></table><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。</p><p>文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
